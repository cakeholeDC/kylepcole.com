// This file serves as a backup of the medium feed json file
// Medium RSS only provides 10 posts, this file allows us to display all posts when updated regularly
// https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@cakehole

const BLOG_BACKUP = {
  "status": "ok",
  "feed": {
    "url": "https://medium.com/feed/@cakehole",
    "title": "Stories by Kyle Cole on Medium",
    "link": "https://medium.com/@cakehole?source=rss-4800652ebeb2------2",
    "author": "",
    "description": "Stories by Kyle Cole on Medium",
    "image": "https://cdn-images-1.medium.com/fit/c/150/150/2*OW5qswH9Ki_OC7VG0si43g.jpeg"
  },
  "items": [
    {
      "title": "Try-Angular",
      "pubDate": "2020-05-26 18:56:00",
      "link": "https://medium.com/@cakehole/try-angular-fafc5d84e025?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/fafc5d84e025",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*dY-4TRwurt8dVasO.jpg",
      "description": "\n<p>When it comes to front-end frameworks, I talk about React a lot. <em>Who doesn‚Äôt love React?!</em> It‚Äôs my preferred framework for a number of reasons; it‚Äôs intuitive, powerful, and flexible. In fact, React is so much my go-to framework that a friend of mine jokingly called me out on it, asking if I could even name another framework.</p>\n<p><strong>I could.</strong> I got the hint though. Acknowledging to myself that I hadn‚Äôt used some of the other popular frameworks very much, if at¬†all‚Ä¶</p>\n<p>So, I decided it was time to try Angular. Here‚Äôs how it¬†went.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dY-4TRwurt8dVasO.jpg\"><figcaption>Do you even Angular,¬†bro?</figcaption></figure><h3>Angular in a¬†Nutshell</h3>\n<p>Before I dive into my analysis, let‚Äôs just touch on what Angular is and how it differs from React. For starters, Angular is an open-sourced TypeScript-based framework (whereas React is a Javascript library). Angular is maintained by Google, along with the open source community (React is maintained by Facebook). Another very important thing to note is that <strong><em>Angular and AngularJS are different things</em></strong>. AngularJS (or Angular v1) is a Javascript library just like React. Angular2+ is a complete rewrite of AngularJS, re-designed as a full fledged framework.</p>\n<h4>Framework vs¬†Library</h4>\n<p>So what does it mean that Angular is a <em>Framework</em>, but React is a <em>Library</em>? Well, when using a library, you have more control over the flow of the application. <strong>You</strong> are choosing when and where to call the library‚Äôs components and functions. When you use a framework, <strong>the framework</strong> is in charge of the flow. It provides some places for you to plug in your code, but only calls on your code as¬†needed.</p>\n<p>Here‚Äôs a great analogy I recently came across: <strong>Libraries are like shopping at Ikea.</strong> The home is already built; but you get to pick out the furniture for each room and arrange it how you want. <strong>Frameworks are more like buying a </strong><a href=\"https://en.wikipedia.org/wiki/Sears_Modern_Homes\"><strong>Sears Home Kit</strong></a><strong>;</strong> the materials only fit together as defined in the blueprint and there‚Äôs not much room for creative¬†input.</p>\n<a href=\"https://medium.com/media/465b1e409d20ca92cbafedcb7abdcbc9/href\">https://medium.com/media/465b1e409d20ca92cbafedcb7abdcbc9/href</a><h3>TypeScript</h3>\n<p>Besides being a framework, one of the things that makes Angular unique from <em>React</em> and <em>Vue</em> is the use of <a href=\"https://www.typescriptlang.org/\">TypeScript.</a> TypeScript is a superset of Javascript that adds a property called type that locks in the specific data type for each construct (such as ‚Äústring‚Äù, or ‚Äúarray‚Äù) and originated from the shortcomings of Javascript. In TypeScript, you might see something like this when defining a¬†class:</p>\n<pre>state:string = 'District of Columbia'<br>active:boolean = false<br>breweries: Object;</pre>\n<p>As you can see, each piece of data has been assigned a specific datatype. Unlike regular Javascript, if you tried to set the value of state=0 you would get an error. In the long term, this is significantly more consistent and maintainable than type handling in regular¬†JS.</p>\n<h3>CLI Component Generation</h3>\n<p>This was probably my favorite thing about Angular. By utilizing Angular‚Äôs CLI, you can generate new components via the command line. By typing the simple command, ng generate [componentName], the Angular CLI will initialize all the files required for that component, and place them in the appropriate directories (more on those files later). I love this feature! It reminds me of the Rails CLI generators for resources and migrations. Anyone who knows me knows that I'm all for automation.</p>\n<p>Note: Angular CLI Commands are prefixed with <strong>ng</strong>‚Ää‚Äî‚Ääfor¬†<em>aNGular.</em></p>\n<h3>Data Binding</h3>\n<p>This was a big one in my opinion. Data binding (state management) happens by default in an Angular app and does not require an external package like Redux or Flux. While this is extremely useful, I found the way in which the data was passed around to be a little convoluted.</p>\n<p>In React, if you wanted to iterate over a list of breweries you would¬†.map() over this.state.array turning each object into a specified component. In Angular, the array would be stored in state and accessed using props prefixed with <strong>*ng</strong> - again, for¬†<em>aNGular.</em></p>\n<pre>&lt;ul *ngIf=\"breweries\"&gt;<br>    &lt;li *ngFor=\"let brew of breweries\"&gt;<br>\t&lt;p class=\"name\"&gt;<br>            &lt;a <br>             href=\"{{ brew.website_url }}\"<br>             class=\"site\"&gt;{{ brew.name }}&lt;/a&gt;<br>        &lt;/p&gt;<br>\t&lt;p class=\"address\"&gt;{{ brew.street }}&lt;/p&gt;<br>\t&lt;p class=\"address\"&gt;{{ brew.address }}&lt;/p&gt;<br>    &lt;/li&gt;<br>&lt;/ul&gt;</pre>\n<p>While the above code does replace both a conditional JSX statement, and a¬†.map(), I don't find this as readable as React¬†syntax.</p>\n<pre>{ this.props.breweries ?<br>    &lt;ul&gt;<br>\t{ this.props.breweries.map(brew =&gt; &lt;Brewery {...brew}/&gt;) }<br>    &lt;/ul&gt;<br>: null }</pre>\n<h3>Routing</h3>\n<p>Routing is another big feature that comes built into Angular. Routing in Angular is handled via a Routes array, that is populated with key:value pairs representing the route, and the¬†action.</p>\n<pre>const routes: Routes = [<br>\t{ path: '', component: Home },<br>\t{ path: 'breweries', component: Breweries },<br>\t{ path: 'about', component: About },<br>];<br>@NgModule({<br>  imports: [RouterModule.forRoot(routes)],<br>  exports: [RouterModule]<br>})<br>export class AppRoutingModule { }</pre>\n<p>The route configuration is very straightforward, but I found it weird to have the routes stored in a separate module and then imported into the app itself. Maybe that‚Äôs just the React developer in me, though. Personally, I like how ReactRouter‚Äôs configuration works using the Switch component.</p>\n<h3>File Structure</h3>\n<p>One thing that particularly bothered me about Angular, was the file structure. When you run the CLI component generator, four files are generated. <em>Two TypeScript, one HTML, and one¬†CSS.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*OMzHpb0b_HGEeFWU.png\"><figcaption><em>FOUR files per component?! üò≥</em></figcaption></figure><p>Each of these files does serve a specific purpose. One of the TypeScript files, <em>name.component.ts</em> is the definition of the Component itself and all of the logic behind that component; export default class YaddaYaddaYadda. The second TypeScript file, <em>name.component.specs.ts</em>, serves as the unit tests for that component. The file <em>name.component.html</em> serves as the <strong>view</strong> for the component‚Äîit's the render() method. And lastly, <em>name.component.css</em> is exactly what you'd expect, the¬†styles.</p>\n<p>I know why the file structure bothered me; in React, I‚Äôm a styled-components guy. I‚Äôm already trying to get my components down to a single file containing all logic, helper functions, and styling. I‚Äôm already tired of jumping between a JS file and a CSS file, further separating the logic and the view doesn‚Äôt accomplish that goal for me. But then again, as I think about it more the separation of responsibility is one of the things that I appreciate most about rails; models, controllers, and¬†views.</p>\n<h3>Final Thoughts</h3>\n<p>Do I like Angular? No. But do I hate Angular? No. I‚Äôm just not used to it yet. Everything I‚Äôve read about Angular is that it has a significantly larger learning curve than React or Vue do; and I can see that. I think I‚Äôd have to work exclusively on Angular every day before I got the hang of it. After switching back to React for a few days, I forgot many of the intricacies of¬†Angular.</p>\n<p>Will I use Angular again? Sure. But am I leaving my beloved React behind? <strong>Absolutely not.</strong></p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fafc5d84e025\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>When it comes to front-end frameworks, I talk about React a lot. <em>Who doesn‚Äôt love React?!</em> It‚Äôs my preferred framework for a number of reasons; it‚Äôs intuitive, powerful, and flexible. In fact, React is so much my go-to framework that a friend of mine jokingly called me out on it, asking if I could even name another framework.</p>\n<p><strong>I could.</strong> I got the hint though. Acknowledging to myself that I hadn‚Äôt used some of the other popular frameworks very much, if at¬†all‚Ä¶</p>\n<p>So, I decided it was time to try Angular. Here‚Äôs how it¬†went.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dY-4TRwurt8dVasO.jpg\"><figcaption>Do you even Angular,¬†bro?</figcaption></figure><h3>Angular in a¬†Nutshell</h3>\n<p>Before I dive into my analysis, let‚Äôs just touch on what Angular is and how it differs from React. For starters, Angular is an open-sourced TypeScript-based framework (whereas React is a Javascript library). Angular is maintained by Google, along with the open source community (React is maintained by Facebook). Another very important thing to note is that <strong><em>Angular and AngularJS are different things</em></strong>. AngularJS (or Angular v1) is a Javascript library just like React. Angular2+ is a complete rewrite of AngularJS, re-designed as a full fledged framework.</p>\n<h4>Framework vs¬†Library</h4>\n<p>So what does it mean that Angular is a <em>Framework</em>, but React is a <em>Library</em>? Well, when using a library, you have more control over the flow of the application. <strong>You</strong> are choosing when and where to call the library‚Äôs components and functions. When you use a framework, <strong>the framework</strong> is in charge of the flow. It provides some places for you to plug in your code, but only calls on your code as¬†needed.</p>\n<p>Here‚Äôs a great analogy I recently came across: <strong>Libraries are like shopping at Ikea.</strong> The home is already built; but you get to pick out the furniture for each room and arrange it how you want. <strong>Frameworks are more like buying a </strong><a href=\"https://en.wikipedia.org/wiki/Sears_Modern_Homes\"><strong>Sears Home Kit</strong></a><strong>;</strong> the materials only fit together as defined in the blueprint and there‚Äôs not much room for creative¬†input.</p>\n<a href=\"https://medium.com/media/465b1e409d20ca92cbafedcb7abdcbc9/href\">https://medium.com/media/465b1e409d20ca92cbafedcb7abdcbc9/href</a><h3>TypeScript</h3>\n<p>Besides being a framework, one of the things that makes Angular unique from <em>React</em> and <em>Vue</em> is the use of <a href=\"https://www.typescriptlang.org/\">TypeScript.</a> TypeScript is a superset of Javascript that adds a property called type that locks in the specific data type for each construct (such as ‚Äústring‚Äù, or ‚Äúarray‚Äù) and originated from the shortcomings of Javascript. In TypeScript, you might see something like this when defining a¬†class:</p>\n<pre>state:string = 'District of Columbia'<br>active:boolean = false<br>breweries: Object;</pre>\n<p>As you can see, each piece of data has been assigned a specific datatype. Unlike regular Javascript, if you tried to set the value of state=0 you would get an error. In the long term, this is significantly more consistent and maintainable than type handling in regular¬†JS.</p>\n<h3>CLI Component Generation</h3>\n<p>This was probably my favorite thing about Angular. By utilizing Angular‚Äôs CLI, you can generate new components via the command line. By typing the simple command, ng generate [componentName], the Angular CLI will initialize all the files required for that component, and place them in the appropriate directories (more on those files later). I love this feature! It reminds me of the Rails CLI generators for resources and migrations. Anyone who knows me knows that I'm all for automation.</p>\n<p>Note: Angular CLI Commands are prefixed with <strong>ng</strong>‚Ää‚Äî‚Ääfor¬†<em>aNGular.</em></p>\n<h3>Data Binding</h3>\n<p>This was a big one in my opinion. Data binding (state management) happens by default in an Angular app and does not require an external package like Redux or Flux. While this is extremely useful, I found the way in which the data was passed around to be a little convoluted.</p>\n<p>In React, if you wanted to iterate over a list of breweries you would¬†.map() over this.state.array turning each object into a specified component. In Angular, the array would be stored in state and accessed using props prefixed with <strong>*ng</strong> - again, for¬†<em>aNGular.</em></p>\n<pre>&lt;ul *ngIf=\"breweries\"&gt;<br>    &lt;li *ngFor=\"let brew of breweries\"&gt;<br>\t&lt;p class=\"name\"&gt;<br>            &lt;a <br>             href=\"{{ brew.website_url }}\"<br>             class=\"site\"&gt;{{ brew.name }}&lt;/a&gt;<br>        &lt;/p&gt;<br>\t&lt;p class=\"address\"&gt;{{ brew.street }}&lt;/p&gt;<br>\t&lt;p class=\"address\"&gt;{{ brew.address }}&lt;/p&gt;<br>    &lt;/li&gt;<br>&lt;/ul&gt;</pre>\n<p>While the above code does replace both a conditional JSX statement, and a¬†.map(), I don't find this as readable as React¬†syntax.</p>\n<pre>{ this.props.breweries ?<br>    &lt;ul&gt;<br>\t{ this.props.breweries.map(brew =&gt; &lt;Brewery {...brew}/&gt;) }<br>    &lt;/ul&gt;<br>: null }</pre>\n<h3>Routing</h3>\n<p>Routing is another big feature that comes built into Angular. Routing in Angular is handled via a Routes array, that is populated with key:value pairs representing the route, and the¬†action.</p>\n<pre>const routes: Routes = [<br>\t{ path: '', component: Home },<br>\t{ path: 'breweries', component: Breweries },<br>\t{ path: 'about', component: About },<br>];<br>@NgModule({<br>  imports: [RouterModule.forRoot(routes)],<br>  exports: [RouterModule]<br>})<br>export class AppRoutingModule { }</pre>\n<p>The route configuration is very straightforward, but I found it weird to have the routes stored in a separate module and then imported into the app itself. Maybe that‚Äôs just the React developer in me, though. Personally, I like how ReactRouter‚Äôs configuration works using the Switch component.</p>\n<h3>File Structure</h3>\n<p>One thing that particularly bothered me about Angular, was the file structure. When you run the CLI component generator, four files are generated. <em>Two TypeScript, one HTML, and one¬†CSS.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*OMzHpb0b_HGEeFWU.png\"><figcaption><em>FOUR files per component?! üò≥</em></figcaption></figure><p>Each of these files does serve a specific purpose. One of the TypeScript files, <em>name.component.ts</em> is the definition of the Component itself and all of the logic behind that component; export default class YaddaYaddaYadda. The second TypeScript file, <em>name.component.specs.ts</em>, serves as the unit tests for that component. The file <em>name.component.html</em> serves as the <strong>view</strong> for the component‚Äîit's the render() method. And lastly, <em>name.component.css</em> is exactly what you'd expect, the¬†styles.</p>\n<p>I know why the file structure bothered me; in React, I‚Äôm a styled-components guy. I‚Äôm already trying to get my components down to a single file containing all logic, helper functions, and styling. I‚Äôm already tired of jumping between a JS file and a CSS file, further separating the logic and the view doesn‚Äôt accomplish that goal for me. But then again, as I think about it more the separation of responsibility is one of the things that I appreciate most about rails; models, controllers, and¬†views.</p>\n<h3>Final Thoughts</h3>\n<p>Do I like Angular? No. But do I hate Angular? No. I‚Äôm just not used to it yet. Everything I‚Äôve read about Angular is that it has a significantly larger learning curve than React or Vue do; and I can see that. I think I‚Äôd have to work exclusively on Angular every day before I got the hang of it. After switching back to React for a few days, I forgot many of the intricacies of¬†Angular.</p>\n<p>Will I use Angular again? Sure. But am I leaving my beloved React behind? <strong>Absolutely not.</strong></p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fafc5d84e025\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "application-development",
        "software-engineering",
        "javascript",
        "angular",
        "frontend-development"
      ]
    },
    {
      "title": "Mapbox",
      "pubDate": "2020-05-17 20:22:47",
      "link": "https://medium.com/@cakehole/mapbox-7c203e93e75c?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/7c203e93e75c",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*vYAMgwGbbG5aov2EuLlinw.jpeg",
      "description": "\n<p>Back in February, I took a trip to Denver (remember traveling?) and decided that I‚Äôd take the opportunity to bootstrap a Rails/React app on a plane see what happened. I had been meaning to revisit an old travel app idea using React and figured that 32,000 feet was the perfect place to start. <a href=\"https://medium.com/@cakehole/cloud-computing-web-apps-at-altitude-bf3d3ffe6009?source=friends_link&amp;sk=782d6cbd5206082600b17c670771d55a\">It was a great learning experience</a>.</p>\n<p>Over the past weeks I‚Äôve refactored the API a few times; rethinking basic relationships, adding models, securing endpoints. You know, standard development stuff. <em>Cloud computing</em> jokes aside, revisiting an old app idea has given me the opportunity to also revisit some stretch features that didn‚Äôt make the cut for my beta¬†version.</p>\n<p>One of those stretch features was map integration. The app is a tool for planning group itineraries; so a map with pins representing milestone events remains a key selling point. <em>You don‚Äôt have to be a boy scout to know that if you‚Äôre lost in a new city the best thing you can do is reference a map to identify where you are, and where you need to¬†be.</em></p>\n<a href=\"https://medium.com/media/7a83ec6d1c913c69659757f55474242b/href\">https://medium.com/media/7a83ec6d1c913c69659757f55474242b/href</a><p>While appealing, the ability to visually see key milestones in map form was solely an improvement to the the <strong>user experience</strong>, and not the core functionality; so it was back-burnered<strong>.</strong> But I was excited to finally explore¬†it.</p>\n<h4>Google Maps</h4>\n<p>I can‚Äôt talk about Mapbox without first talking about Google. Google is touted as the market leader in online mapping. Admittedly, it was hard to find firm stats on market share though because Google‚Äôs product covers so many markets. Some sources compared Google Maps with Apple Maps and Waze, which was not at all the market data I was looking for. Other sources others compared Google Maps to Mapquest, which I didn‚Äôt realize was <a href=\"https://www.mapquest.com/\">still a¬†thing</a>.</p>\n<p>An <a href=\"https://www.datanyze.com/market-share/mapping-and-gis--121/google-maps-api-market-share\">undated analysis by Datanyze.com</a> reports that Google Maps‚Äôs <strong><em>free</em></strong> API service comes in first with 20% of market share for mobile mapping APIs. Google Map‚Äôs <strong><em>paid</em></strong> API services on the other hand, fall to sixth place holding only 0.87% of market¬†share.</p>\n<p>Mapbox, by comparison, comes in second place with roughly 5% of market¬†share.</p>\n<p>I decided to explore <a href=\"https://cloud.google.com/maps-platform/pricing\">Google‚Äôs offering</a> in more detail before making any decisions. It quickly became very clear why Google‚Äôs free services top the market. First, they‚Äôre free; who doesn‚Äôt love free? Second, the very limited free options are extremely simple to implement; static maps <em>(that‚Äôs all they offer)</em>. If all you need is a static map, boy does Google have a great deal for¬†you!</p>\n<p>But wait, there‚Äôs some fine print under the word Free‚Äî<em>for mobile</em>‚Äîit‚Äôs not free for desktop devices?! Turns out at the free tier, Google charges $2 per 1000 requests from a non-mobile device. They want a credit card up front, but do appear to offer the same bonus $200 in credits for your first month that I encountered when exploring <a href=\"https://medium.com/@cakehole/amazon-web-services-416d64af57b8?source=friends_link&amp;sk=29eb11536b99a75949ebda59fa3888f3\">Google Cloud Services</a>.</p>\n<p>As someone looking to explore a mapping API through what would largely be trial and error, linking my credit card to a sandbox environment didn‚Äôt seem like a fiscally sound decision at this time. Sorry¬†Google.</p>\n<h4>Mapbox</h4>\n<p>Mapbox is an alternative to Google maps. According to the <a href=\"https://www.datanyze.com/market-share/mapping-and-gis--121/google-maps-api-market-share\">undated analysis</a> I referenced earlier, Mapbox is Google‚Äôs primary competitor‚Äînext in line is another Google product followed by a product <em>using the Google Maps¬†API.</em></p>\n<p><a href=\"https://www.mapbox.com/pricing/\">Mapbox offers a generous free tier</a>, with every product offering basic free services. There are usage caps, but they‚Äôre large enough that you won‚Äôt reach them in a development environment.</p>\n<p>Using Mapbox is pretty straightforward, and thanks to their thorough documentation if you get stuck the answer isn‚Äôt far away. I followed this tutorial for using <a href=\"https://docs.mapbox.com/help/tutorials/use-mapbox-gl-js-with-react/\">Mapbox with React</a> and had a working map in no time. Working with geolocation data was somewhat new to me, I struggled a bit with parsing floating point numbers to the right precision, but Mapbox anticipated that and touched on it in the tutorial.</p>\n<p>If you‚Äôre thinking that you‚Äôve never seen a Mapbox map, you definitely have. Mapbox is used by many popular websites and applications. <a href=\"https://www.mapbox.com/showcase/\">Facebook, Snapchat, Hotels.com, Washington Post, and Jump Bikes</a> all use¬†Mapbox.</p>\n<p>Uber, the owner of <em>Jump Bikes</em>, has actually built their own <a href=\"https://github.com/visgl/react-map-gl\">React component library</a> for Mapbox. This component library made the Mapbox integration feel much more React-like, so I chose to refactor using <strong>react-map-gl</strong> entirely.</p>\n<h4>How do I know if I‚Äôm looking at a Mapbox¬†map?</h4>\n<p>In my experience, <em>if it doesn‚Äôt look like Google Maps it‚Äôs probably </em><strong><em>Mapbox</em></strong><em>.</em> Mapbox is highly customizable allowing user to create maps with high visual contrast for custom use cases. They also offer a theme gallery in case predefined styles are more your thing; if not, the templates serve as a great source of creative inspiration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vYAMgwGbbG5aov2EuLlinw.jpeg\"><figcaption><a href=\"https://www.mapbox.com/gallery/#mineral\">Mineral Theme</a> for¬†¬©Mapbox</figcaption></figure><p>Yes, Google Maps does offer <a href=\"https://developers.google.com/maps/documentation/javascript/styling\">customization</a> and <a href=\"https://snazzymaps.com/\">templates</a>, but people don‚Äôt seem to customize Google Maps; maybe it‚Äôs not part of the free tier?¬†ü§î</p>\n<h4>Open Street¬†Map</h4>\n<p>I have to give a shout out to <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a>, an open source project dedicated to free and available locally-sourced map data. Mapbox, would not be possible without all the hard work contributed by this dedicated worldwide community of mapping enthusiasts and humanitarians.</p>\n<p>OpenStreetMap also offers a handful mapping <a href=\"https://wiki.openstreetmap.org/wiki/API\">API</a> solutions, all free, as long as you credit the project and it‚Äôs contributors.</p>\n<p>Even Mapbox credits <em>¬©OpenStreetMap</em> at the bottom of every¬†map.</p>\n<h4>Final Thoughts</h4>\n<p>Now that you‚Äôve read this far, I have to come clean. I was always planning to use Mapbox for this project. Their east-coast headquarters is here in DC; they‚Äôre kind of hometown heroes around these¬†parts.</p>\n<p>I‚Äôve had the pleasure of meeting some of their team members at various events over the past few years; they are a smart group of dedicated people working to provide a powerful but flexible mapping solution‚Äîand they‚Äôre doing a great¬†job.</p>\n<p>If you need to utilize Maps in your application, I can‚Äôt recommend Mapbox enough. Don‚Äôt believe me? Check out <a href=\"https://twitter.com/hashtag/builtwithmapbox?f=tweets\">#BuiltWithMapbox</a> to see what others are building with¬†Mapbox.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c203e93e75c\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>Back in February, I took a trip to Denver (remember traveling?) and decided that I‚Äôd take the opportunity to bootstrap a Rails/React app on a plane see what happened. I had been meaning to revisit an old travel app idea using React and figured that 32,000 feet was the perfect place to start. <a href=\"https://medium.com/@cakehole/cloud-computing-web-apps-at-altitude-bf3d3ffe6009?source=friends_link&amp;sk=782d6cbd5206082600b17c670771d55a\">It was a great learning experience</a>.</p>\n<p>Over the past weeks I‚Äôve refactored the API a few times; rethinking basic relationships, adding models, securing endpoints. You know, standard development stuff. <em>Cloud computing</em> jokes aside, revisiting an old app idea has given me the opportunity to also revisit some stretch features that didn‚Äôt make the cut for my beta¬†version.</p>\n<p>One of those stretch features was map integration. The app is a tool for planning group itineraries; so a map with pins representing milestone events remains a key selling point. <em>You don‚Äôt have to be a boy scout to know that if you‚Äôre lost in a new city the best thing you can do is reference a map to identify where you are, and where you need to¬†be.</em></p>\n<a href=\"https://medium.com/media/7a83ec6d1c913c69659757f55474242b/href\">https://medium.com/media/7a83ec6d1c913c69659757f55474242b/href</a><p>While appealing, the ability to visually see key milestones in map form was solely an improvement to the the <strong>user experience</strong>, and not the core functionality; so it was back-burnered<strong>.</strong> But I was excited to finally explore¬†it.</p>\n<h4>Google Maps</h4>\n<p>I can‚Äôt talk about Mapbox without first talking about Google. Google is touted as the market leader in online mapping. Admittedly, it was hard to find firm stats on market share though because Google‚Äôs product covers so many markets. Some sources compared Google Maps with Apple Maps and Waze, which was not at all the market data I was looking for. Other sources others compared Google Maps to Mapquest, which I didn‚Äôt realize was <a href=\"https://www.mapquest.com/\">still a¬†thing</a>.</p>\n<p>An <a href=\"https://www.datanyze.com/market-share/mapping-and-gis--121/google-maps-api-market-share\">undated analysis by Datanyze.com</a> reports that Google Maps‚Äôs <strong><em>free</em></strong> API service comes in first with 20% of market share for mobile mapping APIs. Google Map‚Äôs <strong><em>paid</em></strong> API services on the other hand, fall to sixth place holding only 0.87% of market¬†share.</p>\n<p>Mapbox, by comparison, comes in second place with roughly 5% of market¬†share.</p>\n<p>I decided to explore <a href=\"https://cloud.google.com/maps-platform/pricing\">Google‚Äôs offering</a> in more detail before making any decisions. It quickly became very clear why Google‚Äôs free services top the market. First, they‚Äôre free; who doesn‚Äôt love free? Second, the very limited free options are extremely simple to implement; static maps <em>(that‚Äôs all they offer)</em>. If all you need is a static map, boy does Google have a great deal for¬†you!</p>\n<p>But wait, there‚Äôs some fine print under the word Free‚Äî<em>for mobile</em>‚Äîit‚Äôs not free for desktop devices?! Turns out at the free tier, Google charges $2 per 1000 requests from a non-mobile device. They want a credit card up front, but do appear to offer the same bonus $200 in credits for your first month that I encountered when exploring <a href=\"https://medium.com/@cakehole/amazon-web-services-416d64af57b8?source=friends_link&amp;sk=29eb11536b99a75949ebda59fa3888f3\">Google Cloud Services</a>.</p>\n<p>As someone looking to explore a mapping API through what would largely be trial and error, linking my credit card to a sandbox environment didn‚Äôt seem like a fiscally sound decision at this time. Sorry¬†Google.</p>\n<h4>Mapbox</h4>\n<p>Mapbox is an alternative to Google maps. According to the <a href=\"https://www.datanyze.com/market-share/mapping-and-gis--121/google-maps-api-market-share\">undated analysis</a> I referenced earlier, Mapbox is Google‚Äôs primary competitor‚Äînext in line is another Google product followed by a product <em>using the Google Maps¬†API.</em></p>\n<p><a href=\"https://www.mapbox.com/pricing/\">Mapbox offers a generous free tier</a>, with every product offering basic free services. There are usage caps, but they‚Äôre large enough that you won‚Äôt reach them in a development environment.</p>\n<p>Using Mapbox is pretty straightforward, and thanks to their thorough documentation if you get stuck the answer isn‚Äôt far away. I followed this tutorial for using <a href=\"https://docs.mapbox.com/help/tutorials/use-mapbox-gl-js-with-react/\">Mapbox with React</a> and had a working map in no time. Working with geolocation data was somewhat new to me, I struggled a bit with parsing floating point numbers to the right precision, but Mapbox anticipated that and touched on it in the tutorial.</p>\n<p>If you‚Äôre thinking that you‚Äôve never seen a Mapbox map, you definitely have. Mapbox is used by many popular websites and applications. <a href=\"https://www.mapbox.com/showcase/\">Facebook, Snapchat, Hotels.com, Washington Post, and Jump Bikes</a> all use¬†Mapbox.</p>\n<p>Uber, the owner of <em>Jump Bikes</em>, has actually built their own <a href=\"https://github.com/visgl/react-map-gl\">React component library</a> for Mapbox. This component library made the Mapbox integration feel much more React-like, so I chose to refactor using <strong>react-map-gl</strong> entirely.</p>\n<h4>How do I know if I‚Äôm looking at a Mapbox¬†map?</h4>\n<p>In my experience, <em>if it doesn‚Äôt look like Google Maps it‚Äôs probably </em><strong><em>Mapbox</em></strong><em>.</em> Mapbox is highly customizable allowing user to create maps with high visual contrast for custom use cases. They also offer a theme gallery in case predefined styles are more your thing; if not, the templates serve as a great source of creative inspiration.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vYAMgwGbbG5aov2EuLlinw.jpeg\"><figcaption><a href=\"https://www.mapbox.com/gallery/#mineral\">Mineral Theme</a> for¬†¬©Mapbox</figcaption></figure><p>Yes, Google Maps does offer <a href=\"https://developers.google.com/maps/documentation/javascript/styling\">customization</a> and <a href=\"https://snazzymaps.com/\">templates</a>, but people don‚Äôt seem to customize Google Maps; maybe it‚Äôs not part of the free tier?¬†ü§î</p>\n<h4>Open Street¬†Map</h4>\n<p>I have to give a shout out to <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a>, an open source project dedicated to free and available locally-sourced map data. Mapbox, would not be possible without all the hard work contributed by this dedicated worldwide community of mapping enthusiasts and humanitarians.</p>\n<p>OpenStreetMap also offers a handful mapping <a href=\"https://wiki.openstreetmap.org/wiki/API\">API</a> solutions, all free, as long as you credit the project and it‚Äôs contributors.</p>\n<p>Even Mapbox credits <em>¬©OpenStreetMap</em> at the bottom of every¬†map.</p>\n<h4>Final Thoughts</h4>\n<p>Now that you‚Äôve read this far, I have to come clean. I was always planning to use Mapbox for this project. Their east-coast headquarters is here in DC; they‚Äôre kind of hometown heroes around these¬†parts.</p>\n<p>I‚Äôve had the pleasure of meeting some of their team members at various events over the past few years; they are a smart group of dedicated people working to provide a powerful but flexible mapping solution‚Äîand they‚Äôre doing a great¬†job.</p>\n<p>If you need to utilize Maps in your application, I can‚Äôt recommend Mapbox enough. Don‚Äôt believe me? Check out <a href=\"https://twitter.com/hashtag/builtwithmapbox?f=tweets\">#BuiltWithMapbox</a> to see what others are building with¬†Mapbox.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c203e93e75c\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "rails",
        "mapbox",
        "react",
        "web-development",
        "application-development"
      ]
    },
    {
      "title": "Flex, Grid, and Design Principles",
      "pubDate": "2020-05-09 17:50:19",
      "link": "https://medium.com/@cakehole/flex-grid-and-design-principles-971ff6d4df09?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/971ff6d4df09",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*y6c9125pNu_eFbZvWpYwyA.jpeg",
      "description": "\n<p>A few months ago, I published some <a href=\"https://medium.com/@cakehole/micro-blog-ive-been-struggling-with-getting-elements-to-be-where-i-want-them-in-an-app-i-m-47303c8de83b\">brief thoughts</a> about Flex and Grid. I had struggled with how to properly use these CSS models for a while and had finally found a resource that helped make it click for¬†me.</p>\n<p>Since then I‚Äôve worked on a few new projects and have had the opportunity to play around with each and really understand how they work. Before I share my new thoughts, I‚Äôd like to talk about some traditional graphic design principles.</p>\n<p>In college, I studied Graphic Media; it was kind of like graphic design, but the emphasis was designing for print output. Along with learning about design principles, typography, color theory, and workflow management, we learned a significant amount about printing technologies itself; substrates, ink types, and finishing techniques <em>(graphic design programs traditionally do not cover best practices for printing technologies)</em>. It was a Bachelor of Science program within the School of¬†Art.</p>\n<p>Early in my studies I was exposed to a 1981 Swiss book called <a href=\"https://www.niggli.ch/en/grid-systems-in-graphic-design.html\"><strong>Grid Systems in Graphic Design</strong></a> by <a href=\"https://en.wikipedia.org/wiki/Josef_M%C3%BCller-Brockmann\"><strong><em>Josef M√ºller-Brockmann</em></strong></a><strong><em> (1914‚àí1996)</em></strong><em>.</em> For decades, the book has served as a manual for graphic designers, typographers and three dimensional designers; providing a set of guidelines and rules for the the grid systems that have become accepted as a world wide standard.</p>\n<p>The book is by the industry, for the industry; M√ºller-Brockmann was 50 years into his career as a graphic designer, teacher, and architect when he published Grid Systems. <a href=\"https://www.shillingtoneducation.com/blog/josef-muller-brockmann-tbt/\">He‚Äôs a really fascinating guy</a>. My roommate, an Industrial Designer, owned a copy‚Äîit was a great book to have around as an aspiring typographer. I‚Äôve since bought my own copy, a decision I‚Äôve never regretted. I always refer back to it for both the content, and design inspiration.</p>\n<p>Along with being regarded as one of the most important books in the industry, the book is a work of art itself. Beautifully hard bound, the cover is the most recognizable shade of reddish orange, noticeable on a bookshelf from across the room. On the front, a white grid overlays the book‚Äôs title, typeset in both English and German‚Äî<strong>it‚Äôs foil stamped</strong>‚Äîperfectly set using the very principles outlined in the book. The type on the spine set simply yet elegantly, displaying in a small typeface, maybe 8 pt, the content perfectly aligned to the same grid from the cover. The back, an empty white grid mirroring the¬†front.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6c9125pNu_eFbZvWpYwyA.jpeg\"><figcaption>It‚Äôs Beautiful.</figcaption></figure><p>And yeah, that‚Äôs Helvetica. <strong><em>The Swiss love Helvetica.</em></strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ClSgmtyg4BHewOjLqbYBPQ.jpeg\"><figcaption>English Left / German¬†Right</figcaption></figure><p>Inside, the content, like the cover, is written in half English and half German; the page is split in two columns with English on the left, and German on the right. The dual-language experience always reminds me of a trip I took to Switzerland years ago‚Äîeverything is written in both English and German¬†there.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OfEz7kXAZD6a5BLgdFIU3Q.jpeg\"><figcaption>Grid Examples</figcaption></figure><p>A large majority of pages showcase the exact grids used to design them, helping reinforce the concepts and principles being outlined‚Äîa must for visual learners.</p>\n<h4>Ok, great. It‚Äôs a well designed book. What‚Äôs this have to do with¬†CSS?</h4>\n<p>I know, I know‚Ä¶ Deep down inside I‚Äôm still a typography nerd.</p>\n<p>Trust me, I‚Äôm getting¬†there.</p>\n<p>The reason that I wanted to talk about this book was that its principles have been the foundation of how I‚Äôve approached design for years. The grid is as much a part of the design as the content is. As I started spending more time designing for web, I naturally used leaned to the same proven design principles I was taught and have been using for years; the¬†grid.</p>\n<p>When designing for print output, the first step is to define the grid. So when it came time for styling an application, I took the same approach. After settling on my base grid, I spent hours trying to perfectly align my elements by spanning columns and calculating values based on other element sizes; <em>and</em> <em>then again for every screen¬†size.</em></p>\n<p>I built <a href=\"https://www.kylepcole.com/hunger-swype\">Hunger Swype</a> entirely using grid. I refactored the grid three or four times, it just wasn‚Äôt flexible enough. At the end of the day I ended up with three primary base grids, based on screen size. For my app to be responsive, I had to style each element for each grid. It wasn‚Äôt ideal, but it worked. Now, though, as I add features, I have to style them thrice.¬†ü§¶üèº‚Äç‚ôÇÔ∏è</p>\n<p>While my traditional Grid System did work when applied for the web, it wasn‚Äôt that intuitive. On top of that, my grid itself was not responsive‚ÄîI had just made multiple¬†grids.</p>\n<p><em>Suddenly I was questioning whether I had even applied these core design principles at all, let alone properly.</em></p>\n<p>When styling my next app, <a href=\"https://medium.com/@cakehole/introducing-expiration-an-exercise-in-situational-innovation-5d06634ac1cd\">expiRATION</a>, I opted for a slightly different approach. I had spent countless hours on Grid on my last project, but since had taken time to experiment with Flex. For this app I leaned on my training again and chose to define the base grid first; but this time I wanted a single, flexible, grid. This app was simple, an inventory tracker, so I set out to build my grid using only¬†Flex.</p>\n<p>I found a <a href=\"https://css-tricks.com/dont-overthink-flexbox-grids/\">tutorial</a> that pointed me in the right direction for making a basic grid with Flex. It turned out to be far easier than I expected, and I quickly implemented a grid for my list of items. It was less tedious than if I had used Grid to build the same layout. You could almost use the word <em>automated</em> in comparison when describing Flex.</p>\n<p><em>For what it‚Äôs worth, here‚Äôs a </em><a href=\"https://css-tricks.com/dont-overthink-it-grids/\"><em>simple grid tutorial</em></a><em> by the same¬†author.</em></p>\n<p>When using an <em>explicit grid</em> system, every element needed to be specifically positioned within that grids rows and columns. This gains control, but loses flexibility. Flex on the other hand doesn‚Äôt require explicit row and column definitions. If you put four items in a Flexbox, you‚Äôll have four columns. Need to wrap to another row? flex-wrap can do that. It takes some time to get used to, but takes some of the thinking out of it once you¬†do.</p>\n<p>If I had to pick my favorite thing about Flex, it would be how much easier responsive design becomes. My flex grid scaled <em>almost perfectly</em> to mobile screens, all I really had to change was add flex-direction: column; to stack the content vertically at smaller¬†sizes.</p>\n<h4>Just always use Flex,¬†right?</h4>\n<p>If that floats your boat, go ahead! Compared to Grid, Flex is, well‚Ä¶ <em>flexible</em>. But compared to Flex, Grid is more <em>structured</em>. Does that mean that you should always use Flex when you need flexibility, and grid when you need structure? No, not necessarily.</p>\n<p>I mentioned the term <em>‚Äúexplicit grid‚Äù</em> earlier. An <strong>explicit grid</strong> is a grid defined with grid-template-column or grid-template-row. Explicit grids are great when you know exactly where you want every element positioned. This was the approach I took with Hunger¬†Swype.</p>\n<p>Grids can be designed to have more flexibility, but in doing so you sacrifice structure. If you define a grid using grid-auto-columns or grid-auto-rows, you‚Äôre using an <strong>implicit grid</strong>. Implicit grids will have their rows/columns auto-sized to contain the content accordingly.</p>\n<p>If you really want to get crazy, <strong>explicit</strong> and <strong>implicit</strong> grids can be <strong><em>used together</em></strong> to create highly flexible layouts with fixed rows and flexible columns, or vice-versa.</p>\n<h4>So what‚Äôs¬†best?</h4>\n<p>I‚Äôm no expert, but my opinion is that both Flex and Grid are very powerful CSS models, and both serve multiple purposes. It really comes down to a design decision; how do you as the designer want to display the information and how much control do you need. As I further explore grid systems in web design, I‚Äôm rethinking my approach to designing with grid systems in¬†general.</p>\n<p>I‚Äôve actually thought back to another book I read in college‚Äî<a href=\"https://en.wikipedia.org/wiki/Understanding_Media\"><strong>Understanding Media: The Extensions of Man</strong></a>, by <strong><em>Marshall McLuhan (1911‚Äì1980)</em></strong>. McLuhan, a Canadian philosopher of media theory, coined the expression <strong>the medium is the message</strong>, <em>a theory that a communication medium itself holds a greater impact than the content it provides. </em>The book is way ahead of its time for 1964, and the parallels to modern media are shocking.</p>\n<p><em>McLuhan also accurately predicted the personal computer and world wide web in his 1962 book, </em><a href=\"https://en.wikipedia.org/wiki/The_Gutenberg_Galaxy\"><em>The Gutenberg Galaxy</em></a><em>.</em></p>\n<p>The reason that McLuhan came to mind is because I have been designing for new mediums as I shift into web development. If McLuhan is correct that the medium itself <em>is</em> the message, then the <em>message</em> <em>is different</em> for each unique medium. <strong>Shouldn‚Äôt this be true for our design principles?</strong> What held true for print doesn‚Äôt necessarily work on the web (<a href=\"https://en.wikipedia.org/wiki/Additive_color\"><em>additive</em></a><em> vs. </em><a href=\"https://en.wikipedia.org/wiki/Subtractive_color\"><em>subtractive</em></a><em> color, for example</em>). And what works on the web, might not translate to¬†mobile.</p>\n<p>While the old school principles of the past will always serve as the backbone for current industry best practices, industries change and so should those best practices.</p>\n<p>The real trick is learning how to adapt the proven principles to work with modern mediums. I still figuring out how to best architect my own grid systems with CSS. If you have any tips or tricks that you use, I‚Äôd love to hear¬†them.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=971ff6d4df09\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>A few months ago, I published some <a href=\"https://medium.com/@cakehole/micro-blog-ive-been-struggling-with-getting-elements-to-be-where-i-want-them-in-an-app-i-m-47303c8de83b\">brief thoughts</a> about Flex and Grid. I had struggled with how to properly use these CSS models for a while and had finally found a resource that helped make it click for¬†me.</p>\n<p>Since then I‚Äôve worked on a few new projects and have had the opportunity to play around with each and really understand how they work. Before I share my new thoughts, I‚Äôd like to talk about some traditional graphic design principles.</p>\n<p>In college, I studied Graphic Media; it was kind of like graphic design, but the emphasis was designing for print output. Along with learning about design principles, typography, color theory, and workflow management, we learned a significant amount about printing technologies itself; substrates, ink types, and finishing techniques <em>(graphic design programs traditionally do not cover best practices for printing technologies)</em>. It was a Bachelor of Science program within the School of¬†Art.</p>\n<p>Early in my studies I was exposed to a 1981 Swiss book called <a href=\"https://www.niggli.ch/en/grid-systems-in-graphic-design.html\"><strong>Grid Systems in Graphic Design</strong></a> by <a href=\"https://en.wikipedia.org/wiki/Josef_M%C3%BCller-Brockmann\"><strong><em>Josef M√ºller-Brockmann</em></strong></a><strong><em> (1914‚àí1996)</em></strong><em>.</em> For decades, the book has served as a manual for graphic designers, typographers and three dimensional designers; providing a set of guidelines and rules for the the grid systems that have become accepted as a world wide standard.</p>\n<p>The book is by the industry, for the industry; M√ºller-Brockmann was 50 years into his career as a graphic designer, teacher, and architect when he published Grid Systems. <a href=\"https://www.shillingtoneducation.com/blog/josef-muller-brockmann-tbt/\">He‚Äôs a really fascinating guy</a>. My roommate, an Industrial Designer, owned a copy‚Äîit was a great book to have around as an aspiring typographer. I‚Äôve since bought my own copy, a decision I‚Äôve never regretted. I always refer back to it for both the content, and design inspiration.</p>\n<p>Along with being regarded as one of the most important books in the industry, the book is a work of art itself. Beautifully hard bound, the cover is the most recognizable shade of reddish orange, noticeable on a bookshelf from across the room. On the front, a white grid overlays the book‚Äôs title, typeset in both English and German‚Äî<strong>it‚Äôs foil stamped</strong>‚Äîperfectly set using the very principles outlined in the book. The type on the spine set simply yet elegantly, displaying in a small typeface, maybe 8 pt, the content perfectly aligned to the same grid from the cover. The back, an empty white grid mirroring the¬†front.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*y6c9125pNu_eFbZvWpYwyA.jpeg\"><figcaption>It‚Äôs Beautiful.</figcaption></figure><p>And yeah, that‚Äôs Helvetica. <strong><em>The Swiss love Helvetica.</em></strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ClSgmtyg4BHewOjLqbYBPQ.jpeg\"><figcaption>English Left / German¬†Right</figcaption></figure><p>Inside, the content, like the cover, is written in half English and half German; the page is split in two columns with English on the left, and German on the right. The dual-language experience always reminds me of a trip I took to Switzerland years ago‚Äîeverything is written in both English and German¬†there.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OfEz7kXAZD6a5BLgdFIU3Q.jpeg\"><figcaption>Grid Examples</figcaption></figure><p>A large majority of pages showcase the exact grids used to design them, helping reinforce the concepts and principles being outlined‚Äîa must for visual learners.</p>\n<h4>Ok, great. It‚Äôs a well designed book. What‚Äôs this have to do with¬†CSS?</h4>\n<p>I know, I know‚Ä¶ Deep down inside I‚Äôm still a typography nerd.</p>\n<p>Trust me, I‚Äôm getting¬†there.</p>\n<p>The reason that I wanted to talk about this book was that its principles have been the foundation of how I‚Äôve approached design for years. The grid is as much a part of the design as the content is. As I started spending more time designing for web, I naturally used leaned to the same proven design principles I was taught and have been using for years; the¬†grid.</p>\n<p>When designing for print output, the first step is to define the grid. So when it came time for styling an application, I took the same approach. After settling on my base grid, I spent hours trying to perfectly align my elements by spanning columns and calculating values based on other element sizes; <em>and</em> <em>then again for every screen¬†size.</em></p>\n<p>I built <a href=\"https://www.kylepcole.com/hunger-swype\">Hunger Swype</a> entirely using grid. I refactored the grid three or four times, it just wasn‚Äôt flexible enough. At the end of the day I ended up with three primary base grids, based on screen size. For my app to be responsive, I had to style each element for each grid. It wasn‚Äôt ideal, but it worked. Now, though, as I add features, I have to style them thrice.¬†ü§¶üèº‚Äç‚ôÇÔ∏è</p>\n<p>While my traditional Grid System did work when applied for the web, it wasn‚Äôt that intuitive. On top of that, my grid itself was not responsive‚ÄîI had just made multiple¬†grids.</p>\n<p><em>Suddenly I was questioning whether I had even applied these core design principles at all, let alone properly.</em></p>\n<p>When styling my next app, <a href=\"https://medium.com/@cakehole/introducing-expiration-an-exercise-in-situational-innovation-5d06634ac1cd\">expiRATION</a>, I opted for a slightly different approach. I had spent countless hours on Grid on my last project, but since had taken time to experiment with Flex. For this app I leaned on my training again and chose to define the base grid first; but this time I wanted a single, flexible, grid. This app was simple, an inventory tracker, so I set out to build my grid using only¬†Flex.</p>\n<p>I found a <a href=\"https://css-tricks.com/dont-overthink-flexbox-grids/\">tutorial</a> that pointed me in the right direction for making a basic grid with Flex. It turned out to be far easier than I expected, and I quickly implemented a grid for my list of items. It was less tedious than if I had used Grid to build the same layout. You could almost use the word <em>automated</em> in comparison when describing Flex.</p>\n<p><em>For what it‚Äôs worth, here‚Äôs a </em><a href=\"https://css-tricks.com/dont-overthink-it-grids/\"><em>simple grid tutorial</em></a><em> by the same¬†author.</em></p>\n<p>When using an <em>explicit grid</em> system, every element needed to be specifically positioned within that grids rows and columns. This gains control, but loses flexibility. Flex on the other hand doesn‚Äôt require explicit row and column definitions. If you put four items in a Flexbox, you‚Äôll have four columns. Need to wrap to another row? flex-wrap can do that. It takes some time to get used to, but takes some of the thinking out of it once you¬†do.</p>\n<p>If I had to pick my favorite thing about Flex, it would be how much easier responsive design becomes. My flex grid scaled <em>almost perfectly</em> to mobile screens, all I really had to change was add flex-direction: column; to stack the content vertically at smaller¬†sizes.</p>\n<h4>Just always use Flex,¬†right?</h4>\n<p>If that floats your boat, go ahead! Compared to Grid, Flex is, well‚Ä¶ <em>flexible</em>. But compared to Flex, Grid is more <em>structured</em>. Does that mean that you should always use Flex when you need flexibility, and grid when you need structure? No, not necessarily.</p>\n<p>I mentioned the term <em>‚Äúexplicit grid‚Äù</em> earlier. An <strong>explicit grid</strong> is a grid defined with grid-template-column or grid-template-row. Explicit grids are great when you know exactly where you want every element positioned. This was the approach I took with Hunger¬†Swype.</p>\n<p>Grids can be designed to have more flexibility, but in doing so you sacrifice structure. If you define a grid using grid-auto-columns or grid-auto-rows, you‚Äôre using an <strong>implicit grid</strong>. Implicit grids will have their rows/columns auto-sized to contain the content accordingly.</p>\n<p>If you really want to get crazy, <strong>explicit</strong> and <strong>implicit</strong> grids can be <strong><em>used together</em></strong> to create highly flexible layouts with fixed rows and flexible columns, or vice-versa.</p>\n<h4>So what‚Äôs¬†best?</h4>\n<p>I‚Äôm no expert, but my opinion is that both Flex and Grid are very powerful CSS models, and both serve multiple purposes. It really comes down to a design decision; how do you as the designer want to display the information and how much control do you need. As I further explore grid systems in web design, I‚Äôm rethinking my approach to designing with grid systems in¬†general.</p>\n<p>I‚Äôve actually thought back to another book I read in college‚Äî<a href=\"https://en.wikipedia.org/wiki/Understanding_Media\"><strong>Understanding Media: The Extensions of Man</strong></a>, by <strong><em>Marshall McLuhan (1911‚Äì1980)</em></strong>. McLuhan, a Canadian philosopher of media theory, coined the expression <strong>the medium is the message</strong>, <em>a theory that a communication medium itself holds a greater impact than the content it provides. </em>The book is way ahead of its time for 1964, and the parallels to modern media are shocking.</p>\n<p><em>McLuhan also accurately predicted the personal computer and world wide web in his 1962 book, </em><a href=\"https://en.wikipedia.org/wiki/The_Gutenberg_Galaxy\"><em>The Gutenberg Galaxy</em></a><em>.</em></p>\n<p>The reason that McLuhan came to mind is because I have been designing for new mediums as I shift into web development. If McLuhan is correct that the medium itself <em>is</em> the message, then the <em>message</em> <em>is different</em> for each unique medium. <strong>Shouldn‚Äôt this be true for our design principles?</strong> What held true for print doesn‚Äôt necessarily work on the web (<a href=\"https://en.wikipedia.org/wiki/Additive_color\"><em>additive</em></a><em> vs. </em><a href=\"https://en.wikipedia.org/wiki/Subtractive_color\"><em>subtractive</em></a><em> color, for example</em>). And what works on the web, might not translate to¬†mobile.</p>\n<p>While the old school principles of the past will always serve as the backbone for current industry best practices, industries change and so should those best practices.</p>\n<p>The real trick is learning how to adapt the proven principles to work with modern mediums. I still figuring out how to best architect my own grid systems with CSS. If you have any tips or tricks that you use, I‚Äôd love to hear¬†them.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=971ff6d4df09\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "design-principles",
        "flex",
        "typography",
        "css",
        "grid"
      ]
    },
    {
      "title": "Amazon Web Services",
      "pubDate": "2020-05-04 01:03:38",
      "link": "https://medium.com/@cakehole/amazon-web-services-416d64af57b8?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/416d64af57b8",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*diGS9OU7naTCJY1ngNfh1A.jpeg",
      "description": "\n<p>I recently migrated all of my personal websites over to Amazon Web Services. Why did I decide to go through that hassle? Well, there‚Äôs a number of reasons. But before I get into that, let‚Äôs talk about <a href=\"https://aws.amazon.com/\">Amazon Web Services</a>. AWS is a subsidiary of Amazon that provides on-demand cloud computing platforms and APIs. Today, they are the leading provider of cloud infrastructure technology, far surpassing those provided by <a href=\"https://cloud.google.com/\">Google</a>, <a href=\"https://azure.microsoft.com/en-us/\">Microsoft</a>, and¬†<a href=\"https://www.ibm.com/cloud\">IBM</a>.</p>\n<p><strong>I didn‚Äôt solely pick them because they‚Äôre ‚Äúthe best‚Äù¬†though.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*diGS9OU7naTCJY1ngNfh1A.jpeg\"><figcaption>Amazon Web¬†Services</figcaption></figure><p>So, why did I do it? For starters, I was all over the place. Some of my domains were registered with Name.com, others with GoDaddy. I had an FTP server hosted with HostGator, even though I haven‚Äôt used it in years. A few domains had been pointed to Wix or Wordpress over the years, now pointing to pages with old content, or worse, <em>missing</em>¬†<em>content</em>.</p>\n<p>It had finally spiraled out of control; my wife‚Äôs portfolio site (which I was responsible for) suddenly pointed to an error page because I forgot to renew something‚Ä¶ somewhere‚Ä¶ and I didn‚Äôt even know¬†where.</p>\n<p><strong>It wasn‚Äôt a good look for¬†me.</strong></p>\n<a href=\"https://medium.com/media/da8fbeb5a30a9c91d3a3537f4cde97ac/href\">https://medium.com/media/da8fbeb5a30a9c91d3a3537f4cde97ac/href</a><p>Since I‚Äôm now a developer, I had to fix¬†this.</p>\n<p>I did a little research about my options. Sure, I could stick with GoDaddy, but I was already anxious to try a new solution. On top of that, I‚Äôve had my reservations about their leadership for a while; but I won‚Äôt get into that here. <em>I‚Äôve already said too¬†much.</em></p>\n<h3>Research</h3>\n<p><a href=\"https://cloud.google.com/\"><strong>Google Cloud</strong></a> asks for $0 up front; you pay as you go for services and/or usage which seemed completely reasonable. There‚Äôs nothing worse than paying for bandwidth if you don‚Äôt get any traffic. Google offers a credit-based free trial for their services, currently $300 in credits, but I didn‚Äôt know what products to explore in order to redeem them. I started poking around at the product offerings and was presented with a list‚Äî<em>Kubernetes, Tekton, Dialoglow‚Äî</em>I was overwhelmed immediately. ‚Äú<em>Google already knows everything about me‚Äù </em>I decided, and kept searching (ironically, on¬†Google).</p>\n<p><a href=\"https://www.ibm.com/cloud\"><strong>IMB Cloud</strong></a> also offers a free tier, although it wasn‚Äôt advertised as aggressively on the homepage like with Google. Instead of credits, IBM‚Äôs free tier offers a limited product set which was definitely less overwhelming, but also fewer options to try out. Product names were still proprietary to IBM and therefore mostly ambiguous; <em>Cloudant, Watson, Db2 (</em><a href=\"http://www.dbaneworleans.com/\"><em>isn‚Äôt that a club in New Orleans?</em></a><em>). </em>Unlike Google, IBM provided a brief description with each product allowing me to get a sense of what it was before navigating to that specific product‚Äôs page.</p>\n<p><a href=\"https://azure.microsoft.com/en-us/\"><strong>Microsoft Azure</strong></a> offers a limited set of always-free products, and a $200 credit for their full suite of products available for 12 months. Like the previous two, the product names are vaguely proprietary‚Äî<em>Playfab, Quantum, Kinect‚Äî</em>yes, like Xbox Kinect. Because it was the full suite of products, this list was also overwhelming. But I still felt it was less overwhelming given the brief descriptions provided.</p>\n<p><em>Authors note: I‚Äôve since found a page on the Google Could website that offers brief product descriptions. But they track my every move so they already knew¬†that.</em></p>\n<h4>This is great info, but what about¬†AWS?</h4>\n<p>Oh yeah‚Ä¶ Amazon Web Services. That‚Äôs why you‚Äôre here¬†right?</p>\n<p><a href=\"https://aws.amazon.com/\"><strong>Amazon Web Services</strong></a> offers a free tier that gives you unlimited access to a limited set of 60 products (IBM offers 40), for the remaining products they give 12 months free following your initial sign up date. As expected, Amazon has their own sleek product names‚Äî<em>Knesis, Sumerian, Beanstalk‚Äî</em>but as a user I was presented with categories <strong>before</strong> being presented with product names. That was a nice change of pace. Amazon also provided ample brief product descriptions once I got to that¬†step.</p>\n<h3>Results</h3>\n<h4>My AWS Stack (so¬†far‚Ä¶)</h4>\n<p>I‚Äôve migrated half my domains over to <a href=\"https://aws.amazon.com/route53/\"><strong>Route53</strong></a>. The process was painless with this <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\">step-by-step guide</a> AWS provides. I‚Äôll be migrating the rest over the next few days. I can‚Äôt wait to finally have these all in once place, what was I waiting¬†for?</p>\n<p>I decided to use <a href=\"https://aws.amazon.com/amplify/\"><strong>Amplify</strong></a> for my <em>React</em> apps. Amplify offers a simple github integration that auto-syncs the repo‚Äôs latest push; it works like a charm. There‚Äôs also an Amplify CLI that I‚Äôve started to explore; it removes the auto-sync from the equation and requires a more deliberate push to the production environment. Probably a better long term solution.</p>\n<p>For my <em>Rails</em> apps, I‚Äôve decided to try out <a href=\"https://aws.amazon.com/elasticbeanstalk/\"><strong>ElasticBeanstalk</strong></a> which provides a simple interface to upload your rails_app.zip and if you pair it with Amazon‚Äôs <a href=\"https://aws.amazon.com/rds/\"><strong>RDS</strong></a>, you can easily setup a <em>Postgres</em> database and connect the two. I have just started migrating my first API over from <em>Heroku</em> so my experience is limited, but I haven‚Äôt hit any blocks so¬†far.</p>\n<p><em>Note: There is also a CLI for ElasticBeanstalk and RDS. I will post an update once I get familiar with their CLI deployment.</em></p>\n<h3>Final Thoughts</h3>\n<p>Did the reason I picked AWS over the other solutions come down to twenty randomly selected free products? Absolutely not. The ones I needed were available on every platform I explored. Was it the categorized list of products and descriptions? No, they all ultimately gave me that info in one form or another, but Amazon‚Äôs categorization was definitely more prominent while browsing.</p>\n<p>At the end of the day, the reason I picked AWS was <strong>marketability</strong>. As someone who is currently on the job market (hire me!), two out of three of the job postings I come across list AWS as a <em>required</em>, or <em>desired qualification</em>. In my searches I have not come across many job postings that lists Google, IBM, or Azure as a <em>qualification</em>.</p>\n<p>I strongly believe that if you‚Äôre going to learn something new, you might as well learn one of the most desirable skillsets on the¬†market.</p>\n<p>I mentioned at the beginning of this post that AWS is the leading provider of cloud infrastructure technology. Is that why I picked them? <strong>Yes, absolutely. It just wasn‚Äôt the only¬†reason.</strong></p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=416d64af57b8\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>I recently migrated all of my personal websites over to Amazon Web Services. Why did I decide to go through that hassle? Well, there‚Äôs a number of reasons. But before I get into that, let‚Äôs talk about <a href=\"https://aws.amazon.com/\">Amazon Web Services</a>. AWS is a subsidiary of Amazon that provides on-demand cloud computing platforms and APIs. Today, they are the leading provider of cloud infrastructure technology, far surpassing those provided by <a href=\"https://cloud.google.com/\">Google</a>, <a href=\"https://azure.microsoft.com/en-us/\">Microsoft</a>, and¬†<a href=\"https://www.ibm.com/cloud\">IBM</a>.</p>\n<p><strong>I didn‚Äôt solely pick them because they‚Äôre ‚Äúthe best‚Äù¬†though.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*diGS9OU7naTCJY1ngNfh1A.jpeg\"><figcaption>Amazon Web¬†Services</figcaption></figure><p>So, why did I do it? For starters, I was all over the place. Some of my domains were registered with Name.com, others with GoDaddy. I had an FTP server hosted with HostGator, even though I haven‚Äôt used it in years. A few domains had been pointed to Wix or Wordpress over the years, now pointing to pages with old content, or worse, <em>missing</em>¬†<em>content</em>.</p>\n<p>It had finally spiraled out of control; my wife‚Äôs portfolio site (which I was responsible for) suddenly pointed to an error page because I forgot to renew something‚Ä¶ somewhere‚Ä¶ and I didn‚Äôt even know¬†where.</p>\n<p><strong>It wasn‚Äôt a good look for¬†me.</strong></p>\n<a href=\"https://medium.com/media/da8fbeb5a30a9c91d3a3537f4cde97ac/href\">https://medium.com/media/da8fbeb5a30a9c91d3a3537f4cde97ac/href</a><p>Since I‚Äôm now a developer, I had to fix¬†this.</p>\n<p>I did a little research about my options. Sure, I could stick with GoDaddy, but I was already anxious to try a new solution. On top of that, I‚Äôve had my reservations about their leadership for a while; but I won‚Äôt get into that here. <em>I‚Äôve already said too¬†much.</em></p>\n<h3>Research</h3>\n<p><a href=\"https://cloud.google.com/\"><strong>Google Cloud</strong></a> asks for $0 up front; you pay as you go for services and/or usage which seemed completely reasonable. There‚Äôs nothing worse than paying for bandwidth if you don‚Äôt get any traffic. Google offers a credit-based free trial for their services, currently $300 in credits, but I didn‚Äôt know what products to explore in order to redeem them. I started poking around at the product offerings and was presented with a list‚Äî<em>Kubernetes, Tekton, Dialoglow‚Äî</em>I was overwhelmed immediately. ‚Äú<em>Google already knows everything about me‚Äù </em>I decided, and kept searching (ironically, on¬†Google).</p>\n<p><a href=\"https://www.ibm.com/cloud\"><strong>IMB Cloud</strong></a> also offers a free tier, although it wasn‚Äôt advertised as aggressively on the homepage like with Google. Instead of credits, IBM‚Äôs free tier offers a limited product set which was definitely less overwhelming, but also fewer options to try out. Product names were still proprietary to IBM and therefore mostly ambiguous; <em>Cloudant, Watson, Db2 (</em><a href=\"http://www.dbaneworleans.com/\"><em>isn‚Äôt that a club in New Orleans?</em></a><em>). </em>Unlike Google, IBM provided a brief description with each product allowing me to get a sense of what it was before navigating to that specific product‚Äôs page.</p>\n<p><a href=\"https://azure.microsoft.com/en-us/\"><strong>Microsoft Azure</strong></a> offers a limited set of always-free products, and a $200 credit for their full suite of products available for 12 months. Like the previous two, the product names are vaguely proprietary‚Äî<em>Playfab, Quantum, Kinect‚Äî</em>yes, like Xbox Kinect. Because it was the full suite of products, this list was also overwhelming. But I still felt it was less overwhelming given the brief descriptions provided.</p>\n<p><em>Authors note: I‚Äôve since found a page on the Google Could website that offers brief product descriptions. But they track my every move so they already knew¬†that.</em></p>\n<h4>This is great info, but what about¬†AWS?</h4>\n<p>Oh yeah‚Ä¶ Amazon Web Services. That‚Äôs why you‚Äôre here¬†right?</p>\n<p><a href=\"https://aws.amazon.com/\"><strong>Amazon Web Services</strong></a> offers a free tier that gives you unlimited access to a limited set of 60 products (IBM offers 40), for the remaining products they give 12 months free following your initial sign up date. As expected, Amazon has their own sleek product names‚Äî<em>Knesis, Sumerian, Beanstalk‚Äî</em>but as a user I was presented with categories <strong>before</strong> being presented with product names. That was a nice change of pace. Amazon also provided ample brief product descriptions once I got to that¬†step.</p>\n<h3>Results</h3>\n<h4>My AWS Stack (so¬†far‚Ä¶)</h4>\n<p>I‚Äôve migrated half my domains over to <a href=\"https://aws.amazon.com/route53/\"><strong>Route53</strong></a>. The process was painless with this <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\">step-by-step guide</a> AWS provides. I‚Äôll be migrating the rest over the next few days. I can‚Äôt wait to finally have these all in once place, what was I waiting¬†for?</p>\n<p>I decided to use <a href=\"https://aws.amazon.com/amplify/\"><strong>Amplify</strong></a> for my <em>React</em> apps. Amplify offers a simple github integration that auto-syncs the repo‚Äôs latest push; it works like a charm. There‚Äôs also an Amplify CLI that I‚Äôve started to explore; it removes the auto-sync from the equation and requires a more deliberate push to the production environment. Probably a better long term solution.</p>\n<p>For my <em>Rails</em> apps, I‚Äôve decided to try out <a href=\"https://aws.amazon.com/elasticbeanstalk/\"><strong>ElasticBeanstalk</strong></a> which provides a simple interface to upload your rails_app.zip and if you pair it with Amazon‚Äôs <a href=\"https://aws.amazon.com/rds/\"><strong>RDS</strong></a>, you can easily setup a <em>Postgres</em> database and connect the two. I have just started migrating my first API over from <em>Heroku</em> so my experience is limited, but I haven‚Äôt hit any blocks so¬†far.</p>\n<p><em>Note: There is also a CLI for ElasticBeanstalk and RDS. I will post an update once I get familiar with their CLI deployment.</em></p>\n<h3>Final Thoughts</h3>\n<p>Did the reason I picked AWS over the other solutions come down to twenty randomly selected free products? Absolutely not. The ones I needed were available on every platform I explored. Was it the categorized list of products and descriptions? No, they all ultimately gave me that info in one form or another, but Amazon‚Äôs categorization was definitely more prominent while browsing.</p>\n<p>At the end of the day, the reason I picked AWS was <strong>marketability</strong>. As someone who is currently on the job market (hire me!), two out of three of the job postings I come across list AWS as a <em>required</em>, or <em>desired qualification</em>. In my searches I have not come across many job postings that lists Google, IBM, or Azure as a <em>qualification</em>.</p>\n<p>I strongly believe that if you‚Äôre going to learn something new, you might as well learn one of the most desirable skillsets on the¬†market.</p>\n<p>I mentioned at the beginning of this post that AWS is the leading provider of cloud infrastructure technology. Is that why I picked them? <strong>Yes, absolutely. It just wasn‚Äôt the only¬†reason.</strong></p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=416d64af57b8\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "cloud-infrastructure",
        "aws",
        "hosting",
        "cloud-services",
        "web-development"
      ]
    },
    {
      "title": "RSS and Today‚Äôs Web",
      "pubDate": "2020-04-27 01:49:18",
      "link": "https://medium.com/@cakehole/rss-to-jason-93b8efb149d?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/93b8efb149d",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/768/1*TIWOSDmJ7pMz4bve46O7Eg.png",
      "description": "\n<p>If you‚Äôve used the internet in the past two decades, you‚Äôve definitely come across term <strong>RSS Feed</strong>. Like most people, you likely brushed passed RSS as a fancy push notification integration you didn‚Äôt need because you already had a web browser handy. At best, you might have tried that OS X screensaver one time‚Äîlinking it to your favorite Wired.com tech keyword <em>(Apparently that‚Äôs not even a default OS X screensaver anymore)</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/768/1*TIWOSDmJ7pMz4bve46O7Eg.png\"><figcaption>Is this like CSS or something?</figcaption></figure><h3>What is¬†RSS?</h3>\n<p>Officially, RSS stands for <a href=\"https://en.wikipedia.org/wiki/Resource_Description_Framework\"><em>RDF</em></a><em> Site Summary</em>; but the technology has also adopted the backronyms <em>Rich Site Summary</em> and <em>Really Simple Syndication</em> over the years. It was created in March 1999 by Netscape (remember them?) as a way to source data to their My.Netscape.Com portal. After Netscape‚Äôs acquisition by AOL in 2001, support of RSS was suspended and several independent organizations took over maintaining the technology.</p>\n<p>In the simplest terms, RSS is a web-standard for easily delivering syndicated content through <a href=\"https://en.wikipedia.org/wiki/XML\">XML</a>-formatted plain text to other applications. RSS feeds work much like your Facebook news feed does. You <em>subscribe</em> to a feed (<em>follow</em> a Facebook Page) and that feed‚Äôs content is automatically added to your news aggregator (your news¬†feed).</p>\n<blockquote>Subscribing to a website RSS removes the need for the user to manually check the website for new content. Instead, their browser constantly monitors the feed(s) and informs the user of any updates through an aggregator. (source: <a href=\"https://en.wikipedia.org/wiki/RSS\">wikipedia</a>)</blockquote>\n<p>If you had asked me last week, I would have told you that RSS was a relic of the past. ‚Äú<em>The web is all JSON now.‚Äù</em> I would have said confidently. I would have made an argument about the internet speeds in the 1990‚Äôs and early 2000‚Äôs and how it made sense to deliver a text feed over the internet instead of a website. I‚Äôd acknowledge that we have significantly faster internet today, and use that as a basis for my argument that that nobody uses RSS feeds anymore. This week though, I would have to admit I was wrong. Albeit only partially.</p>\n<p>Over the past 15 or so years, there has been far less interest in RSS feeds. With the rise of social media, brands have shifted to the ‚Äúsubscribe/follow‚Äù model. Instead of offering their content via an RSS feed they tailor their content and distribute it across various platforms. Even Google doesn‚Äôt like RSS anymore; they discontinued Google Reader back in July 2013 citing declining use‚Ää‚Äî‚Ää<strong>and that product didn‚Äôt even provide content. It was literally too much overhead to run the¬†server.</strong></p>\n<h3>How is RSS used in¬†2020?</h3>\n<p>Well, it‚Äôs use hasn‚Äôt changed at all. Today, RSS is still used to deliver content, we just don‚Äôt hear about it that much. RSS feeds are the best way to get a complete look at a site‚Äôs new content‚Ää‚Äî‚Äänot just the stuff that gets pushed up on social media. The social media sites, Facebook, Twitter, Instagram, all have algorithms that decide what users see. A signifiant of that is based on what <em>other people</em> have viewed‚Äîwhat‚Äôs trending.</p>\n<p>What an RSS feed can do that social medial cannot is provide you with a bias-free timeline of every single article the Washington Post has published. Articles won‚Äôt be filtered because it‚Äôs content somehow violates Twitter‚Äôs terms of service. Facebook wont show you the same article 3 times because your Aunt, former co-worker, and friend from elementary school thought it was worth a thumbs up. You won‚Äôt see the post about Acme Corp‚Äôs latest charitable donation that they paid instagram to place at the top of your¬†feed.</p>\n<p>If it‚Äôs such a great way to get content, why don‚Äôt companies push their RSS feeds anymore? <strong>Page views. Likes. Follows. Retweets. </strong>The focus of these companies has shifted from delivering a story reliably to as many consumers<strong> </strong>as possible to having the most trending, or viral, content. <em>(Personally, I feel this has also had a negative affect on the </em><strong><em>quality</em></strong><em> of our news content, but I digress‚Ä¶)</em></p>\n<h3>RSS Readers¬†Today</h3>\n<p>There are still many RSS readers around today that serve the original purpose of aggregating news into a single feed. On top of that, most websites still support the RSS protocol even if they don‚Äôt talk about¬†it.</p>\n<p>Here are some of the more popular ones from 2019 in no particular order:</p>\n<p><a href=\"https://feedly.com/i/welcome\"><strong>Feedly</strong></a><strong>:</strong> a simple interface with basic categories, as well as a home page filled with the latest news from all sources. This is currently one of the most popular feed readers¬†online.</p>\n<p><a href=\"https://feedreader.com/\"><strong>Feedreader</strong></a><strong>: </strong>a simple, minimalistic reader that supports basic categorization.</p>\n<p><a href=\"https://flipboard.com/\"><strong>Flipboard</strong></a><strong>:</strong> a beautifully designed reader that looks great on mobile devices. Recommend for those wanting a more visual experience.</p>\n<h3>What else can I do with¬†RSS?</h3>\n<p>Since we now know that RSS is essentially a curated data feed, what else can we do with the data besides aggregate it? Well, the possibilities are endless. You could parse the <a href=\"https://www.reddit.com/new.rss\">Reddit RSS</a> feed of new posts for keywords so that you can be the first to comment. You could use the <a href=\"https://washingtondc.craigslist.org/search/msa?format=rss\">Craigslist RSS</a> feed to watch competing listings and make sure your item is the best priced one on the market. Theoretically, you could use an RSS feed to make a clone of the <a href=\"https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml\">New York Times</a> to get around their paywall, but that would be unethical.</p>\n<p>Once cool thing that I recently did with an RSS feed was convert it to JSON in order to import it into my React application. Sure, I could have tried to parse the XML from the feed directly, but I decided that JSON was a better approach.</p>\n<p>How do you convert RSS to JSON? Great Question. I found two main approaches to converting RSS, online and¬†local.</p>\n<h4>Online:</h4>\n<p><a href=\"https://rss2json.com/\">RSS 2 JSON</a> is an online RSS to JSON converter. From the website you can enter an RSS feed URL and then download the JSON content. This is great or a one time conversion, but what if you needed to convert the RSS on the fly? Good news, they also have an API. The API has a free tier that has some usage limits, and API keys can be issued for a higher request¬†rate.</p>\n<p>To use the free tier of the API, prefix the RSS feed URL with the following, and make a fetch request to the combined URL. The result will be a JSON representation of the RSS feed. It probably won‚Äôt be pretty, but with the right massaging you‚Äôll be able to use the content. <a href=\"https://rss2json.com/docs\">See the docs for adding API key params as¬†needed.</a></p>\n<pre>https://api.rss2json.com/v1/api.json?rss_url='RSS_FEED_URL_HERE'</pre>\n<h4>Local:</h4>\n<p>If you don‚Äôt like the API approach or you need to make a lot of requests and don‚Äôt want to pay for an API key you could use the <a href=\"https://www.npmjs.com/package/rss-to-json\">rss-to-json</a> npm package to do the RSS to JSON conversion within your app itself. It works more or less the same way as the API does, except you feed the RSS feed URL into a function which returns the JSON¬†output.</p>\n<pre>var Feed <strong>=</strong> require('rss-to-json')<br>Feed.load('RSS_FEED_URL_HERE', function(err, rss){<br>    console.log(rss)<br>})</pre>\n<h3>Should You Use¬†RSS?</h3>\n<p>Yes. RSS was developed to serve a very specific purpose, and I believe that purpose still exists today. The need to quickly transmit text across the internet will never go away, so I don‚Äôt expect that RSS is going anywhere anytime soon. Plus, the ability to automatically monitor a feed for updates is unmatched with a Javascript Fetch.</p>\n<p>I never really got into RSS back in to the day, but after doing some research into RSS, I plan to actually try out an RSS reader myself and attempt to curate my own news as an exercise. Will it change the way I <em>consume</em> my news on a whole, probably not. But at least I‚Äôll have a better understanding of the technology as a¬†whole.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=93b8efb149d\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>If you‚Äôve used the internet in the past two decades, you‚Äôve definitely come across term <strong>RSS Feed</strong>. Like most people, you likely brushed passed RSS as a fancy push notification integration you didn‚Äôt need because you already had a web browser handy. At best, you might have tried that OS X screensaver one time‚Äîlinking it to your favorite Wired.com tech keyword <em>(Apparently that‚Äôs not even a default OS X screensaver anymore)</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/768/1*TIWOSDmJ7pMz4bve46O7Eg.png\"><figcaption>Is this like CSS or something?</figcaption></figure><h3>What is¬†RSS?</h3>\n<p>Officially, RSS stands for <a href=\"https://en.wikipedia.org/wiki/Resource_Description_Framework\"><em>RDF</em></a><em> Site Summary</em>; but the technology has also adopted the backronyms <em>Rich Site Summary</em> and <em>Really Simple Syndication</em> over the years. It was created in March 1999 by Netscape (remember them?) as a way to source data to their My.Netscape.Com portal. After Netscape‚Äôs acquisition by AOL in 2001, support of RSS was suspended and several independent organizations took over maintaining the technology.</p>\n<p>In the simplest terms, RSS is a web-standard for easily delivering syndicated content through <a href=\"https://en.wikipedia.org/wiki/XML\">XML</a>-formatted plain text to other applications. RSS feeds work much like your Facebook news feed does. You <em>subscribe</em> to a feed (<em>follow</em> a Facebook Page) and that feed‚Äôs content is automatically added to your news aggregator (your news¬†feed).</p>\n<blockquote>Subscribing to a website RSS removes the need for the user to manually check the website for new content. Instead, their browser constantly monitors the feed(s) and informs the user of any updates through an aggregator. (source: <a href=\"https://en.wikipedia.org/wiki/RSS\">wikipedia</a>)</blockquote>\n<p>If you had asked me last week, I would have told you that RSS was a relic of the past. ‚Äú<em>The web is all JSON now.‚Äù</em> I would have said confidently. I would have made an argument about the internet speeds in the 1990‚Äôs and early 2000‚Äôs and how it made sense to deliver a text feed over the internet instead of a website. I‚Äôd acknowledge that we have significantly faster internet today, and use that as a basis for my argument that that nobody uses RSS feeds anymore. This week though, I would have to admit I was wrong. Albeit only partially.</p>\n<p>Over the past 15 or so years, there has been far less interest in RSS feeds. With the rise of social media, brands have shifted to the ‚Äúsubscribe/follow‚Äù model. Instead of offering their content via an RSS feed they tailor their content and distribute it across various platforms. Even Google doesn‚Äôt like RSS anymore; they discontinued Google Reader back in July 2013 citing declining use‚Ää‚Äî‚Ää<strong>and that product didn‚Äôt even provide content. It was literally too much overhead to run the¬†server.</strong></p>\n<h3>How is RSS used in¬†2020?</h3>\n<p>Well, it‚Äôs use hasn‚Äôt changed at all. Today, RSS is still used to deliver content, we just don‚Äôt hear about it that much. RSS feeds are the best way to get a complete look at a site‚Äôs new content‚Ää‚Äî‚Äänot just the stuff that gets pushed up on social media. The social media sites, Facebook, Twitter, Instagram, all have algorithms that decide what users see. A signifiant of that is based on what <em>other people</em> have viewed‚Äîwhat‚Äôs trending.</p>\n<p>What an RSS feed can do that social medial cannot is provide you with a bias-free timeline of every single article the Washington Post has published. Articles won‚Äôt be filtered because it‚Äôs content somehow violates Twitter‚Äôs terms of service. Facebook wont show you the same article 3 times because your Aunt, former co-worker, and friend from elementary school thought it was worth a thumbs up. You won‚Äôt see the post about Acme Corp‚Äôs latest charitable donation that they paid instagram to place at the top of your¬†feed.</p>\n<p>If it‚Äôs such a great way to get content, why don‚Äôt companies push their RSS feeds anymore? <strong>Page views. Likes. Follows. Retweets. </strong>The focus of these companies has shifted from delivering a story reliably to as many consumers<strong> </strong>as possible to having the most trending, or viral, content. <em>(Personally, I feel this has also had a negative affect on the </em><strong><em>quality</em></strong><em> of our news content, but I digress‚Ä¶)</em></p>\n<h3>RSS Readers¬†Today</h3>\n<p>There are still many RSS readers around today that serve the original purpose of aggregating news into a single feed. On top of that, most websites still support the RSS protocol even if they don‚Äôt talk about¬†it.</p>\n<p>Here are some of the more popular ones from 2019 in no particular order:</p>\n<p><a href=\"https://feedly.com/i/welcome\"><strong>Feedly</strong></a><strong>:</strong> a simple interface with basic categories, as well as a home page filled with the latest news from all sources. This is currently one of the most popular feed readers¬†online.</p>\n<p><a href=\"https://feedreader.com/\"><strong>Feedreader</strong></a><strong>: </strong>a simple, minimalistic reader that supports basic categorization.</p>\n<p><a href=\"https://flipboard.com/\"><strong>Flipboard</strong></a><strong>:</strong> a beautifully designed reader that looks great on mobile devices. Recommend for those wanting a more visual experience.</p>\n<h3>What else can I do with¬†RSS?</h3>\n<p>Since we now know that RSS is essentially a curated data feed, what else can we do with the data besides aggregate it? Well, the possibilities are endless. You could parse the <a href=\"https://www.reddit.com/new.rss\">Reddit RSS</a> feed of new posts for keywords so that you can be the first to comment. You could use the <a href=\"https://washingtondc.craigslist.org/search/msa?format=rss\">Craigslist RSS</a> feed to watch competing listings and make sure your item is the best priced one on the market. Theoretically, you could use an RSS feed to make a clone of the <a href=\"https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml\">New York Times</a> to get around their paywall, but that would be unethical.</p>\n<p>Once cool thing that I recently did with an RSS feed was convert it to JSON in order to import it into my React application. Sure, I could have tried to parse the XML from the feed directly, but I decided that JSON was a better approach.</p>\n<p>How do you convert RSS to JSON? Great Question. I found two main approaches to converting RSS, online and¬†local.</p>\n<h4>Online:</h4>\n<p><a href=\"https://rss2json.com/\">RSS 2 JSON</a> is an online RSS to JSON converter. From the website you can enter an RSS feed URL and then download the JSON content. This is great or a one time conversion, but what if you needed to convert the RSS on the fly? Good news, they also have an API. The API has a free tier that has some usage limits, and API keys can be issued for a higher request¬†rate.</p>\n<p>To use the free tier of the API, prefix the RSS feed URL with the following, and make a fetch request to the combined URL. The result will be a JSON representation of the RSS feed. It probably won‚Äôt be pretty, but with the right massaging you‚Äôll be able to use the content. <a href=\"https://rss2json.com/docs\">See the docs for adding API key params as¬†needed.</a></p>\n<pre>https://api.rss2json.com/v1/api.json?rss_url='RSS_FEED_URL_HERE'</pre>\n<h4>Local:</h4>\n<p>If you don‚Äôt like the API approach or you need to make a lot of requests and don‚Äôt want to pay for an API key you could use the <a href=\"https://www.npmjs.com/package/rss-to-json\">rss-to-json</a> npm package to do the RSS to JSON conversion within your app itself. It works more or less the same way as the API does, except you feed the RSS feed URL into a function which returns the JSON¬†output.</p>\n<pre>var Feed <strong>=</strong> require('rss-to-json')<br>Feed.load('RSS_FEED_URL_HERE', function(err, rss){<br>    console.log(rss)<br>})</pre>\n<h3>Should You Use¬†RSS?</h3>\n<p>Yes. RSS was developed to serve a very specific purpose, and I believe that purpose still exists today. The need to quickly transmit text across the internet will never go away, so I don‚Äôt expect that RSS is going anywhere anytime soon. Plus, the ability to automatically monitor a feed for updates is unmatched with a Javascript Fetch.</p>\n<p>I never really got into RSS back in to the day, but after doing some research into RSS, I plan to actually try out an RSS reader myself and attempt to curate my own news as an exercise. Will it change the way I <em>consume</em> my news on a whole, probably not. But at least I‚Äôll have a better understanding of the technology as a¬†whole.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=93b8efb149d\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        
      ]
    },
    {
      "title": "Styling Components in React",
      "pubDate": "2020-04-18 18:02:09",
      "link": "https://medium.com/@cakehole/styling-components-in-react-2622cf8d9c7e?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/2622cf8d9c7e",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*np-yQBMSpsrKxBS_mlCpwA.jpeg",
      "description": "\n<p>When it comes to styling components in ReactJS, there are many approaches a developer can take. Each approach has it‚Äôs own pros and cons, and some are suited better for specific purposes than others. This post will not cover every possible approach to styling components in React‚Ää‚Äî‚Ääthere are far too many to cover them all. What I will cover in this post are my three favorite ways to style components, and when or why I use¬†them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*np-yQBMSpsrKxBS_mlCpwA.jpeg\"><figcaption>So chic.</figcaption></figure><p>Before we get started, let‚Äôs recap what a <strong>component</strong> is in React. According to the official React docs, <em>‚ÄúComponents let you split the UI into independent, reusable pieces, and think about each piece in isolation. Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called ‚Äúprops‚Äù) and return React elements describing what should appear on the screen.‚Äù</em> In their most basic form, Components are HTML elements. And like any HTML element, we apply styling to them via CSS (or SASS/SCSS).</p>\n<h3>1. Inline¬†Styling</h3>\n<p>Inline styling is the most basic way to apply a style to a react component. Like inline styling in HTML, the styles are applied directly inline when creating the element. Styles do not live in an external file, and classes are not¬†used.</p>\n<p>In React, inline styles are applied using the style prop. The style prop accepts a JSX Object containing the camelCase equivalent of the CSS properties as key/value pairs. If you wanted set a CSS property of an element to be background-color: red; you would use backgroundColor: \"red\", in the style¬†object.</p>\n<pre>export default function MyComponent() {<br>    return(<br>      &lt;div style={{ <br>        background-color: \"red\", <br>        font-size: '2rem'<br>      }}&gt;Component Content&lt;/div&gt;<br>    )<br>}</pre>\n<p>Most developers will tell you to stay away from inline styling for a number of reasons. For starters, every element has to be individually styled; even if they look the same. If you ever need to change the style of those elements you better buckle up, because you‚Äôre going to be there a while. Also, they cannot be overridden easily.</p>\n<p>My recommendation follows this best practice. Steer clear of inline styling unless you absolutely have to (but you shouldn‚Äôt ever have¬†to).</p>\n<h3>2. Class Names and¬†CSS</h3>\n<p>This has been my go to method for years, long before learning React. By applying class names to components you are able to group similar elements together under a unified style. All elements with a given class name, will have the same styles and behavior applied to them. These styles are then defined in an external style sheet using CSS (or SASS/SCSS, if you‚Äôre into that) which is linked to the PWA through the html header. To assign a class name in react, pass the component a prop of className that is equal to the class you wish to¬†assign.</p>\n<pre>export default function MyComponent() {<br>    return(<br>      &lt;div className=\"my-styled-component\"&gt;Component Content&lt;/div&gt;<br>    )<br>}</pre>\n<p>In your style sheet you‚Äôll then define the CSS for that class and all elements with the class name of my-styled-component will have the following styles¬†applied.</p>\n<pre>.my-styled-component {<br>    background-color: red;<br>    font-size: 3rem;<br>}</pre>\n<p>This approach works very well for managing different component types across an application, especially if you‚Äôre utilizing SCSS/SASS to work with variables or nest your styles. One downside to this approach is that by giving every single component a unique class name, you now have a lot of class names to keep up with. When the time comes to update or redesign the component you have to open Component.js and identify the className and then go over to your App.scss file, locate the class name and then make your changes. The extra step doesn‚Äôt seem that bad, until you‚Äôre undergoing a full redesign.</p>\n<h3>3. Styled Components</h3>\n<p>A new approach that I recently learned is <a href=\"https://styled-components.com/\">Styled Components</a>. Styled Components is a node package that lets you add styling to Component.js without using inline styles. You still define the styles just like you would in an external CSS file, but they‚Äôre not separate. This is a huge time saver when it comes time to update a component as you don‚Äôt have to jump across multiple¬†files.</p>\n<p>Styled Components is pretty straight forward to use. Once imported, you create a const and assign it to styled.[html-element-type]. Styled Components will turn that const into a React component with the specified styles applied to it. You can then return that component as you would any other component. <strong><em>Note: Styled Components takes the actual CSS properties, not camelCased like React inline styling¬†does.</em></strong></p>\n<pre>import styled from 'styled-components'<br>const MyStyledComponent = styled.div`<br> display:flex;<br> width: 90%;<br> margin: auto;<br> text-align: left;<br>`<br>export default function MyComponent() {<br>    return(<br>      &lt;MyStyledComponent&gt;<br>        Component Content<br>      &lt;MyStyledComponent/&gt;<br>    )<br>}</pre>\n<p>One really cool thing about Styled Components is that it allows you to change the style based on props. Using JSX within your styled component, you could apply a dynamic style to the component: color: ${props =&gt; props.primary¬†? \"red\"¬†: \"white\"}. Sure, you could also do this with class names: className={ props.primary¬†? \"red-div\"¬†: \"white-div\" } but again, that‚Äôs two more class names to manage in your¬†CSS.</p>\n<p>If you have installed node-sass in your application, then Styled Components will accept SASS/SCSS in addition to CSS. However, one downside I‚Äôve discovered to Styled Components is that SASS variables no longer work globally‚Äîthey only work in the component in which they are¬†defined.</p>\n<p>Since variables are one of the primary reasons I love SASS, that was almost a deal breaker for me. Then I discovered that Styled Components has a <a href=\"https://styled-components.com/docs/advanced\">ThemeProvider</a> that allows you to create a theme and share across your components‚Äîbasically the exact thing that SASS variables provides. I still need a little more practice with ThemeProvider as it‚Äôs a little counter-intuitive IMO, but we‚Äôre getting¬†there.</p>\n<p>Well, that‚Äôs how I‚Äôm styling these days. As with everything coding, I‚Äôm sure I‚Äôll be doing it differently in a month once I learn something new. There‚Äôs actually a package called <a href=\"https://cssinjs.org/?v=v10.1.1\">JSS</a> that I‚Äôm very interested in trying‚Äîit is very similar to Styled Components where the styles are written directly in Component.js but the syntax is closer to JavaScript (camelCased, nested objects) and also utilizes class names again. I‚Äôll report back on that once I try it¬†out.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2622cf8d9c7e\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>When it comes to styling components in ReactJS, there are many approaches a developer can take. Each approach has it‚Äôs own pros and cons, and some are suited better for specific purposes than others. This post will not cover every possible approach to styling components in React‚Ää‚Äî‚Ääthere are far too many to cover them all. What I will cover in this post are my three favorite ways to style components, and when or why I use¬†them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*np-yQBMSpsrKxBS_mlCpwA.jpeg\"><figcaption>So chic.</figcaption></figure><p>Before we get started, let‚Äôs recap what a <strong>component</strong> is in React. According to the official React docs, <em>‚ÄúComponents let you split the UI into independent, reusable pieces, and think about each piece in isolation. Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called ‚Äúprops‚Äù) and return React elements describing what should appear on the screen.‚Äù</em> In their most basic form, Components are HTML elements. And like any HTML element, we apply styling to them via CSS (or SASS/SCSS).</p>\n<h3>1. Inline¬†Styling</h3>\n<p>Inline styling is the most basic way to apply a style to a react component. Like inline styling in HTML, the styles are applied directly inline when creating the element. Styles do not live in an external file, and classes are not¬†used.</p>\n<p>In React, inline styles are applied using the style prop. The style prop accepts a JSX Object containing the camelCase equivalent of the CSS properties as key/value pairs. If you wanted set a CSS property of an element to be background-color: red; you would use backgroundColor: \"red\", in the style¬†object.</p>\n<pre>export default function MyComponent() {<br>    return(<br>      &lt;div style={{ <br>        background-color: \"red\", <br>        font-size: '2rem'<br>      }}&gt;Component Content&lt;/div&gt;<br>    )<br>}</pre>\n<p>Most developers will tell you to stay away from inline styling for a number of reasons. For starters, every element has to be individually styled; even if they look the same. If you ever need to change the style of those elements you better buckle up, because you‚Äôre going to be there a while. Also, they cannot be overridden easily.</p>\n<p>My recommendation follows this best practice. Steer clear of inline styling unless you absolutely have to (but you shouldn‚Äôt ever have¬†to).</p>\n<h3>2. Class Names and¬†CSS</h3>\n<p>This has been my go to method for years, long before learning React. By applying class names to components you are able to group similar elements together under a unified style. All elements with a given class name, will have the same styles and behavior applied to them. These styles are then defined in an external style sheet using CSS (or SASS/SCSS, if you‚Äôre into that) which is linked to the PWA through the html header. To assign a class name in react, pass the component a prop of className that is equal to the class you wish to¬†assign.</p>\n<pre>export default function MyComponent() {<br>    return(<br>      &lt;div className=\"my-styled-component\"&gt;Component Content&lt;/div&gt;<br>    )<br>}</pre>\n<p>In your style sheet you‚Äôll then define the CSS for that class and all elements with the class name of my-styled-component will have the following styles¬†applied.</p>\n<pre>.my-styled-component {<br>    background-color: red;<br>    font-size: 3rem;<br>}</pre>\n<p>This approach works very well for managing different component types across an application, especially if you‚Äôre utilizing SCSS/SASS to work with variables or nest your styles. One downside to this approach is that by giving every single component a unique class name, you now have a lot of class names to keep up with. When the time comes to update or redesign the component you have to open Component.js and identify the className and then go over to your App.scss file, locate the class name and then make your changes. The extra step doesn‚Äôt seem that bad, until you‚Äôre undergoing a full redesign.</p>\n<h3>3. Styled Components</h3>\n<p>A new approach that I recently learned is <a href=\"https://styled-components.com/\">Styled Components</a>. Styled Components is a node package that lets you add styling to Component.js without using inline styles. You still define the styles just like you would in an external CSS file, but they‚Äôre not separate. This is a huge time saver when it comes time to update a component as you don‚Äôt have to jump across multiple¬†files.</p>\n<p>Styled Components is pretty straight forward to use. Once imported, you create a const and assign it to styled.[html-element-type]. Styled Components will turn that const into a React component with the specified styles applied to it. You can then return that component as you would any other component. <strong><em>Note: Styled Components takes the actual CSS properties, not camelCased like React inline styling¬†does.</em></strong></p>\n<pre>import styled from 'styled-components'<br>const MyStyledComponent = styled.div`<br> display:flex;<br> width: 90%;<br> margin: auto;<br> text-align: left;<br>`<br>export default function MyComponent() {<br>    return(<br>      &lt;MyStyledComponent&gt;<br>        Component Content<br>      &lt;MyStyledComponent/&gt;<br>    )<br>}</pre>\n<p>One really cool thing about Styled Components is that it allows you to change the style based on props. Using JSX within your styled component, you could apply a dynamic style to the component: color: ${props =&gt; props.primary¬†? \"red\"¬†: \"white\"}. Sure, you could also do this with class names: className={ props.primary¬†? \"red-div\"¬†: \"white-div\" } but again, that‚Äôs two more class names to manage in your¬†CSS.</p>\n<p>If you have installed node-sass in your application, then Styled Components will accept SASS/SCSS in addition to CSS. However, one downside I‚Äôve discovered to Styled Components is that SASS variables no longer work globally‚Äîthey only work in the component in which they are¬†defined.</p>\n<p>Since variables are one of the primary reasons I love SASS, that was almost a deal breaker for me. Then I discovered that Styled Components has a <a href=\"https://styled-components.com/docs/advanced\">ThemeProvider</a> that allows you to create a theme and share across your components‚Äîbasically the exact thing that SASS variables provides. I still need a little more practice with ThemeProvider as it‚Äôs a little counter-intuitive IMO, but we‚Äôre getting¬†there.</p>\n<p>Well, that‚Äôs how I‚Äôm styling these days. As with everything coding, I‚Äôm sure I‚Äôll be doing it differently in a month once I learn something new. There‚Äôs actually a package called <a href=\"https://cssinjs.org/?v=v10.1.1\">JSS</a> that I‚Äôm very interested in trying‚Äîit is very similar to Styled Components where the styles are written directly in Component.js but the syntax is closer to JavaScript (camelCased, nested objects) and also utilizes class names again. I‚Äôll report back on that once I try it¬†out.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2622cf8d9c7e\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "styled-components",
        "scss",
        "react",
        "css",
        "sass"
      ]
    },
    {
      "title": "Error Handling for External Media",
      "pubDate": "2020-04-09 19:53:17",
      "link": "https://medium.com/@cakehole/error-handling-for-external-media-d998a3bb0960?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/d998a3bb0960",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*M3cpG7df5Jqn6sD42N9bxw.png",
      "description": "\n<p>When creating web applications developers often have to rely on external data sources for media. Images, videos, audio files, and¬†.pdf documents are often linked to an application through URLs provided by the dataset. Sometimes, an application may require us to scan a local folder for a filename that matches the data. What happens though when that external or local file gets renamed, or deleted, and the change doesn‚Äôt trickle into the¬†dataset?</p>\n<figure><img alt=\"Image by Ouch.pics (https://icons8.com)\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3cpG7df5Jqn6sD42N9bxw.png\"><figcaption><a href=\"https://icons8.com/\">wtf.jpg?</a></figcaption></figure><p>If you guessed broken links, missing images, and failed embeds; then you‚Äôre¬†right!</p>\n<p>There are several ways to account for missing media, and even those depend on the tech you‚Äôre using. In JavaScript we could write a function to check if the local file can be required and return a boolean value <em>(Node actually has a builtin¬†</em><em>.exists() function)</em>.</p>\n<pre>let image = data.image</pre>\n<pre>function fileExists(file){<br>    return require(file) //this will return a boolean<br>}</pre>\n<pre>fileExists(image) // =&gt; true/false</pre>\n<p>The downside this function is that it doesn‚Äôt provide a fallback value. It simply returns true/false and then then you have to actually error handle the missing image elsewhere.</p>\n<p>We could also use a try...catch statement render the file, and then catch the error if and when it¬†happens.</p>\n<pre>let image = data.image</pre>\n<pre>try {<br> renderExternalFile(file)<br>}<br>catch(e) {<br> console.error(e)<br>}</pre>\n<p>This approach still requires some sort of error handling. Now, you could add a¬†...finally in there to handle that by reassigning the image variable and then returning the element, but that‚Äôs a lot of¬†steps.</p>\n<pre>let image = data.image</pre>\n<pre>try {<br> renderExternalFile(file) <br>}<br>catch(e) {<br>  console.error(e)<br>  file = \"fallback.jpg\"<br>}<br>finally {<br> return renderExternalFile(file)<br>}</pre>\n<p>We could use a switch statement to compares the data with all the possible combinations and return a default when there is no match. This is actually even more steps now‚Ä¶¬†ü§¶üèº‚Äç‚ôÇÔ∏è</p>\n<pre>switch(data.image) {<br> case \"option1\":<br>   return \"image1.png\"<br> case \"option2\":<br>   return \"image2.png\"<br> case \"option3\":<br>   return \"image4.png\"<br> default:<br>   return \"fallback.jpg\"</pre>\n<p>While all of these approaches will work with enough fine tuning, I recently learned one trick that is not only less code, but seems to work more reliably. That is the HTML onerror attribute. <strong><em>The HTML </em></strong><strong><em>onerror attribute fires a callback function when an error occurs while loading an external file. </em></strong>That means that if an error occurs (such as the resource can‚Äôt be found), the onerror function will be invoked. In that function you can specify an action, such as setting the source of the events target, which is the element¬†itself.</p>\n<pre>&lt;img src=\"image.jpg\" onerror=\"myFunction()\" /&gt;</pre>\n<pre>&lt;script&gt;<br>function myFunction(event) {<br>  event.target.src = \"fallback.jpg\"<br>}<br>&lt;/script&gt;</pre>\n<p><strong><em>Author‚Äôs Note:</em></strong><em> If using ReactJS, the </em><em>onerror attribute can be added with JSX by passing a prop of </em><em>onError={ event =&gt; event.target.src=\"default.jpg\" } to your component.</em></p>\n<p>The onerror attribute can be added to the following <a href=\"https://www.w3schools.com/html/html5_semantic_elements.asp\">semantic HTML</a> tags: &lt;audio&gt;,&lt;body&gt;,&lt;embed&gt;,&lt;img&gt;,&lt;link&gt;,&lt;object&gt;,&lt;script&gt;,&lt;video&gt;. I was surprised to see link on that list given that I don‚Äôt generally think of links as ‚Äòmedia‚Äô elements, but it makes complete sense that they support this attribute. If an external link has been taken down, you don‚Äôt want to send your users to¬†it.</p>\n<p>Designing web applications with proper error handling will most definitely lead to fewer bugs later on. Now that you know a few ways to handle errors when referencing external media will allow you can better code around the problem up front, and hopefully reduce your headaches later.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d998a3bb0960\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>When creating web applications developers often have to rely on external data sources for media. Images, videos, audio files, and¬†.pdf documents are often linked to an application through URLs provided by the dataset. Sometimes, an application may require us to scan a local folder for a filename that matches the data. What happens though when that external or local file gets renamed, or deleted, and the change doesn‚Äôt trickle into the¬†dataset?</p>\n<figure><img alt=\"Image by Ouch.pics (https://icons8.com)\" src=\"https://cdn-images-1.medium.com/max/1024/1*M3cpG7df5Jqn6sD42N9bxw.png\"><figcaption><a href=\"https://icons8.com/\">wtf.jpg?</a></figcaption></figure><p>If you guessed broken links, missing images, and failed embeds; then you‚Äôre¬†right!</p>\n<p>There are several ways to account for missing media, and even those depend on the tech you‚Äôre using. In JavaScript we could write a function to check if the local file can be required and return a boolean value <em>(Node actually has a builtin¬†</em><em>.exists() function)</em>.</p>\n<pre>let image = data.image</pre>\n<pre>function fileExists(file){<br>    return require(file) //this will return a boolean<br>}</pre>\n<pre>fileExists(image) // =&gt; true/false</pre>\n<p>The downside this function is that it doesn‚Äôt provide a fallback value. It simply returns true/false and then then you have to actually error handle the missing image elsewhere.</p>\n<p>We could also use a try...catch statement render the file, and then catch the error if and when it¬†happens.</p>\n<pre>let image = data.image</pre>\n<pre>try {<br> renderExternalFile(file)<br>}<br>catch(e) {<br> console.error(e)<br>}</pre>\n<p>This approach still requires some sort of error handling. Now, you could add a¬†...finally in there to handle that by reassigning the image variable and then returning the element, but that‚Äôs a lot of¬†steps.</p>\n<pre>let image = data.image</pre>\n<pre>try {<br> renderExternalFile(file) <br>}<br>catch(e) {<br>  console.error(e)<br>  file = \"fallback.jpg\"<br>}<br>finally {<br> return renderExternalFile(file)<br>}</pre>\n<p>We could use a switch statement to compares the data with all the possible combinations and return a default when there is no match. This is actually even more steps now‚Ä¶¬†ü§¶üèº‚Äç‚ôÇÔ∏è</p>\n<pre>switch(data.image) {<br> case \"option1\":<br>   return \"image1.png\"<br> case \"option2\":<br>   return \"image2.png\"<br> case \"option3\":<br>   return \"image4.png\"<br> default:<br>   return \"fallback.jpg\"</pre>\n<p>While all of these approaches will work with enough fine tuning, I recently learned one trick that is not only less code, but seems to work more reliably. That is the HTML onerror attribute. <strong><em>The HTML </em></strong><strong><em>onerror attribute fires a callback function when an error occurs while loading an external file. </em></strong>That means that if an error occurs (such as the resource can‚Äôt be found), the onerror function will be invoked. In that function you can specify an action, such as setting the source of the events target, which is the element¬†itself.</p>\n<pre>&lt;img src=\"image.jpg\" onerror=\"myFunction()\" /&gt;</pre>\n<pre>&lt;script&gt;<br>function myFunction(event) {<br>  event.target.src = \"fallback.jpg\"<br>}<br>&lt;/script&gt;</pre>\n<p><strong><em>Author‚Äôs Note:</em></strong><em> If using ReactJS, the </em><em>onerror attribute can be added with JSX by passing a prop of </em><em>onError={ event =&gt; event.target.src=\"default.jpg\" } to your component.</em></p>\n<p>The onerror attribute can be added to the following <a href=\"https://www.w3schools.com/html/html5_semantic_elements.asp\">semantic HTML</a> tags: &lt;audio&gt;,&lt;body&gt;,&lt;embed&gt;,&lt;img&gt;,&lt;link&gt;,&lt;object&gt;,&lt;script&gt;,&lt;video&gt;. I was surprised to see link on that list given that I don‚Äôt generally think of links as ‚Äòmedia‚Äô elements, but it makes complete sense that they support this attribute. If an external link has been taken down, you don‚Äôt want to send your users to¬†it.</p>\n<p>Designing web applications with proper error handling will most definitely lead to fewer bugs later on. Now that you know a few ways to handle errors when referencing external media will allow you can better code around the problem up front, and hopefully reduce your headaches later.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d998a3bb0960\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "web-design",
        "html",
        "web-development",
        "error-handling",
        "javascript"
      ]
    },
    {
      "title": "Introducing expiRATION: An Exercise in Situational Innovation",
      "pubDate": "2020-03-29 23:45:15",
      "link": "https://medium.com/@cakehole/introducing-expiration-an-exercise-in-situational-innovation-5d06634ac1cd?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/5d06634ac1cd",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/640/1*8G7ASzeDCOEB8w1ThJmJ-w.jpeg",
      "description": "\n<p><strong>It‚Äôs March 2020.</strong> The entire world is under shelter-in-place orders due to the COVID-19 Pandemic. Society is self-quarantining to prevent further spread of this virus. Bars and Restaurants are closed. Companies big and small have shifted to 100% remote workplaces. Large gatherings‚ÄîConcerts, Music festivals, and weddings‚Äîare all cancelled for the upcoming summer months. Entire sports seasons have been put on hold or cancelled. The 2020 Summer Olympics, postponed to 2021. Stuck at home for the foreseeable future, people have flocked to grocery stores and bought up all the chicken, frozen vegetables, and toilet paper (if they‚Äôre lucky enough to find¬†any).</p>\n<p>We‚Äôre facing widespread shortages on both consumer products and medical equipment. Businesses are getting creative‚Äîdistilleries across America have retrofitted their equipment and have begun to <a href=\"https://www.distilledspirits.org/distillers-responding-to-covid-19/distilleries-making-hand-sanitizer/\">manufacture hand sanitizer</a>. GM will soon halt automobile production at one facility to start <a href=\"https://www.wsj.com/articles/trump-lashes-out-at-general-motors-over-ventilators-11585327749\">manufacturing ventilators</a> instead. Anheuser-Busch has <a href=\"https://www.anheuser-busch.com/newsroom/2020/03/anheuser-busch-will-redirect-sports-entertainment-investments.html\">donated a sizable portion of their sports budget</a> for the year to the Red Cross (approx. $5 million, minus what they‚Äôve spent on all the ads telling consumers this, of¬†course).</p>\n<p>It‚Äôs an interesting time we‚Äôve found ourselves in; this something that most of us have never experienced before. Those who <em>were</em> alive during the 1952 Polio epidemic are now the most at risk for COVID-19; and many of them were so young at the time that they likely don‚Äôt even remember the Polio outbreak.</p>\n<p>Hard times have always sparked innovation. During the depression out of work Americans were looking for a way to pass the time that didn‚Äôt cost money. Board games with the goals of <a href=\"https://www.history.com/news/great-depression-games-monopoly\">buying and selling property</a> and <a href=\"https://www.davison.com/blog/great-inventions-from-bad-situations/\">creating words from tiles</a> became a family favorites. Today, we know this games as <em>Monopoly </em>and<em> Scrabble</em>. The electric razor was invented when some guy in Alaska <a href=\"https://www.wired.com/2011/03/0318electric-shavers-go-on-sale/\">grew tired of shaving with cold water</a>. Radar was created during WWII as a way to <a href=\"https://www.wired.com/2008/02/dayintech-0226/\">help pilots avoid thunderstorms.</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*8G7ASzeDCOEB8w1ThJmJ-w.jpeg\"></figure><p>As my wife and I started preparing for our inevitable staycation, we too found ourselves in ransacked grocery stores. We had a list but couldn‚Äôt stick to it, everything was sold out. Instead of chicken breast, we found ground Lamb. Instead of steaks we went home with chunk stew meat. We‚Äôre not trying to hoard supplies, but we also don‚Äôt want to go back to the store and risk exposure for a while. We grabbed what we could find for canned goods, the last can of black beans in the aisle, and headed¬†home.</p>\n<p>As we were unpacking the groceries into the already very full freezer my wife looked at me and said <em>‚ÄúCan you make me an app that will tell me what‚Äôs going to expire in here first? I want to make sure that we‚Äôre not wasting any food for the next few months.‚Äù </em>I stopped what I was doing and thought about about it for a minute. <em>This is it</em>. This is the app we <em>need</em> right now. We didn‚Äôt need it a month ago, but today we need to ration our food. This was <strong><em>Situational Innovation</em></strong>.</p>\n<p>I said to her confidently <em>‚ÄúOf course I can make¬†that.‚Äù</em></p>\n<p>I started sketching out some ideas and showed her some wireframes. She immediately provided feedback‚Ää‚Äî‚Ää‚ÄúHow do I know how much of something I have?‚Äù ‚ÄúCan I specify a category? What If I want to search all vegetables?‚Äù ‚ÄúI want a button to advance the expiration date by one day.‚Äù ‚ÄúCould my coworker use this too?‚Äù‚Ää‚Äî‚ÄäI now had user stories and was ready to¬†build.</p>\n<p>All things considered, the app had relatively simple core functions:</p>\n<ol>\n<li>As a user, I want to add an item to my inventory</li>\n<li>As a user, I want to record an expiration date, category, and location for each¬†item</li>\n<li>As a user, I want a list of all my items sorted by expiration date</li>\n<li>As a user, I want to filter the items by location and¬†category</li>\n<li>As a user, I want to be able to modify the expiration date of an¬†item</li>\n</ol>\n<p>I chose to use Rails/React for this project because I knew that I could get something built fairly quickly. If I had chosen to work with a new framework it would only delay the project which the client (my wife) was already antsy¬†for.</p>\n<p>I sat down and started hacking away. My client wanted a skateboard by the end of the weekend. After setting up my rails associations I quickly had an API up and running with some seed data. The first task was to display the items. I fetched the data from my backend and mapped it to an unordered list; with each list item being a list of it‚Äôs own properties‚Äîname, category, location, expiration_date‚Äîit wasn‚Äôt pretty but it was the data I was looking¬†for.</p>\n<p>I decided my next step was to display the items sorted by expiration date rather than ID; that is the whole purpose after all. I proceeded to apply a¬†.sort() to the data but pretty quickly determined that Fri, 27 Mar 2020 12:00:00 UTC +00:00 was not a format that was going to work for this app. I had a flashback to my <a href=\"https://medium.com/@cakehole/new-date-datetime-new-time-now-3e7a99c3ff8b\">last experience with date-times</a>‚Ää‚Äî‚ÄäI really wanted the app to say <em>‚ÄúExpiring Tomorrow‚Äù </em>but didn‚Äôt really want to calculate how many days in the future an event was; that was a can of worms I wasn‚Äôt ready to¬†open.</p>\n<p>Thats when I remembered about <a href=\"https://momentjs.com/\">Moment.js</a>, a javascript package that was recommended to me after building my travel app and struggling with the conversion of all date-times to milliseconds to pass them between Ruby and Javascript. I had looked at the package documentation briefly, but had never actually implemented it.</p>\n<p>Moment.js works very much like the default Date object in Javascript, you instantiate a new Moment with an optional argument of a date-time value. If no value is provided, a date-time object representing the current date-time will be created. Moment objects have various methods that can be called on them that affect the returned¬†value:</p>\n<pre><strong>Format Dates<br></strong>moment().format(‚ÄòMMMM Do YYYY, h:mm:ss a‚Äô);<br>     // March 29th 2020, 7:25:52 pm<br>moment().format(‚Äòdddd‚Äô);<br>     // Sunday<br>moment().format(‚ÄúMMM Do YY‚Äù);<br>     // Mar 29th 20<br>moment().format();<br>     // 2020‚Äì03‚Äì29T19:25:52‚Äì04:00</pre>\n<pre><strong>Relative Time<br></strong>moment(‚Äú20111031‚Äù, ‚ÄúYYYYMMDD‚Äù).fromNow();<br>     // 8 years ago<br>moment().startOf(‚Äòday‚Äô).fromNow();<br>     // 19 hours ago<br>moment().endOf(‚Äòday‚Äô).fromNow();<br>     // in 5 hours<br>moment().startOf(‚Äòhour‚Äô).fromNow();<br>     // 26 minutes ago</pre>\n<pre><strong>Calendar/Time Math<br></strong>moment().subtract(10, ‚Äòdays‚Äô);<br>     // 03/19/2020<br>moment().subtract(6, ‚Äòdays‚Äô).calendar();<br>     // Last Monday at 7:25 PM<br>moment().subtract(3, ‚Äòdays‚Äô).calendar();<br>     // Last Thursday at 7:25 PM<br>moment().subtract(1, ‚Äòdays‚Äô).calendar();<br>     // Yesterday at 7:25 PM<br>moment().calendar();<br>     // Today at 7:25 PM<br>moment().add(1, ‚Äòdays‚Äô).calendar();<br>     // Tomorrow at 7:25 PM<br>moment().add(3, ‚Äòdays‚Äô).calendar();<br>     // Wednesday at 7:25 PM<br>moment().add(10, ‚Äòdays‚Äô).calendar();</pre>\n<pre><strong>Comparisons</strong><br>moment('2020-03-29').isSame('2020-03-29');<br>     //true<br>moment('2010-10-20').isBefore('2010-10-21');<br>     // true<br>moment('2010-10-20').isAfter('2010-10-19');<br>     // true</pre>\n<p>These formatting methods changed the game when creating this app! Using Moment.js allowed me to very easily display the number of days until something expired without having to get into complex date-time math. It even allowed me to do some conditional styling on my components! As the expiration date gets closer, the color changes. The experience was way easier than my previous attempts to compare date-times and calculate hours on my own. A wise man once said not to re-invent the wheel; I definitely agree.</p>\n<p>As for the app, it‚Äôs called expiRATION‚Äî a combination of <em>Expiration</em> and <em>Ration</em>. I‚Äôll follow up with a link once it‚Äôs live but for now you can checkout the <a href=\"https://github.com/cakeholeDC/expiration\">codebase on github</a>. It‚Äôs not really styled yet and I‚Äôm still ironing out some bugs, but my wife has started to use it to track our rations! As the inspiration behind this all, she has been a great beta tester! She even showed a few colleagues on a Zoom chat the other day; they all want to use it too! In the meantime, I‚Äôll be making the most of my quarantine by putting the finishing touches on an idea that resulted from a tough situation.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5d06634ac1cd\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p><strong>It‚Äôs March 2020.</strong> The entire world is under shelter-in-place orders due to the COVID-19 Pandemic. Society is self-quarantining to prevent further spread of this virus. Bars and Restaurants are closed. Companies big and small have shifted to 100% remote workplaces. Large gatherings‚ÄîConcerts, Music festivals, and weddings‚Äîare all cancelled for the upcoming summer months. Entire sports seasons have been put on hold or cancelled. The 2020 Summer Olympics, postponed to 2021. Stuck at home for the foreseeable future, people have flocked to grocery stores and bought up all the chicken, frozen vegetables, and toilet paper (if they‚Äôre lucky enough to find¬†any).</p>\n<p>We‚Äôre facing widespread shortages on both consumer products and medical equipment. Businesses are getting creative‚Äîdistilleries across America have retrofitted their equipment and have begun to <a href=\"https://www.distilledspirits.org/distillers-responding-to-covid-19/distilleries-making-hand-sanitizer/\">manufacture hand sanitizer</a>. GM will soon halt automobile production at one facility to start <a href=\"https://www.wsj.com/articles/trump-lashes-out-at-general-motors-over-ventilators-11585327749\">manufacturing ventilators</a> instead. Anheuser-Busch has <a href=\"https://www.anheuser-busch.com/newsroom/2020/03/anheuser-busch-will-redirect-sports-entertainment-investments.html\">donated a sizable portion of their sports budget</a> for the year to the Red Cross (approx. $5 million, minus what they‚Äôve spent on all the ads telling consumers this, of¬†course).</p>\n<p>It‚Äôs an interesting time we‚Äôve found ourselves in; this something that most of us have never experienced before. Those who <em>were</em> alive during the 1952 Polio epidemic are now the most at risk for COVID-19; and many of them were so young at the time that they likely don‚Äôt even remember the Polio outbreak.</p>\n<p>Hard times have always sparked innovation. During the depression out of work Americans were looking for a way to pass the time that didn‚Äôt cost money. Board games with the goals of <a href=\"https://www.history.com/news/great-depression-games-monopoly\">buying and selling property</a> and <a href=\"https://www.davison.com/blog/great-inventions-from-bad-situations/\">creating words from tiles</a> became a family favorites. Today, we know this games as <em>Monopoly </em>and<em> Scrabble</em>. The electric razor was invented when some guy in Alaska <a href=\"https://www.wired.com/2011/03/0318electric-shavers-go-on-sale/\">grew tired of shaving with cold water</a>. Radar was created during WWII as a way to <a href=\"https://www.wired.com/2008/02/dayintech-0226/\">help pilots avoid thunderstorms.</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*8G7ASzeDCOEB8w1ThJmJ-w.jpeg\"></figure><p>As my wife and I started preparing for our inevitable staycation, we too found ourselves in ransacked grocery stores. We had a list but couldn‚Äôt stick to it, everything was sold out. Instead of chicken breast, we found ground Lamb. Instead of steaks we went home with chunk stew meat. We‚Äôre not trying to hoard supplies, but we also don‚Äôt want to go back to the store and risk exposure for a while. We grabbed what we could find for canned goods, the last can of black beans in the aisle, and headed¬†home.</p>\n<p>As we were unpacking the groceries into the already very full freezer my wife looked at me and said <em>‚ÄúCan you make me an app that will tell me what‚Äôs going to expire in here first? I want to make sure that we‚Äôre not wasting any food for the next few months.‚Äù </em>I stopped what I was doing and thought about about it for a minute. <em>This is it</em>. This is the app we <em>need</em> right now. We didn‚Äôt need it a month ago, but today we need to ration our food. This was <strong><em>Situational Innovation</em></strong>.</p>\n<p>I said to her confidently <em>‚ÄúOf course I can make¬†that.‚Äù</em></p>\n<p>I started sketching out some ideas and showed her some wireframes. She immediately provided feedback‚Ää‚Äî‚Ää‚ÄúHow do I know how much of something I have?‚Äù ‚ÄúCan I specify a category? What If I want to search all vegetables?‚Äù ‚ÄúI want a button to advance the expiration date by one day.‚Äù ‚ÄúCould my coworker use this too?‚Äù‚Ää‚Äî‚ÄäI now had user stories and was ready to¬†build.</p>\n<p>All things considered, the app had relatively simple core functions:</p>\n<ol>\n<li>As a user, I want to add an item to my inventory</li>\n<li>As a user, I want to record an expiration date, category, and location for each¬†item</li>\n<li>As a user, I want a list of all my items sorted by expiration date</li>\n<li>As a user, I want to filter the items by location and¬†category</li>\n<li>As a user, I want to be able to modify the expiration date of an¬†item</li>\n</ol>\n<p>I chose to use Rails/React for this project because I knew that I could get something built fairly quickly. If I had chosen to work with a new framework it would only delay the project which the client (my wife) was already antsy¬†for.</p>\n<p>I sat down and started hacking away. My client wanted a skateboard by the end of the weekend. After setting up my rails associations I quickly had an API up and running with some seed data. The first task was to display the items. I fetched the data from my backend and mapped it to an unordered list; with each list item being a list of it‚Äôs own properties‚Äîname, category, location, expiration_date‚Äîit wasn‚Äôt pretty but it was the data I was looking¬†for.</p>\n<p>I decided my next step was to display the items sorted by expiration date rather than ID; that is the whole purpose after all. I proceeded to apply a¬†.sort() to the data but pretty quickly determined that Fri, 27 Mar 2020 12:00:00 UTC +00:00 was not a format that was going to work for this app. I had a flashback to my <a href=\"https://medium.com/@cakehole/new-date-datetime-new-time-now-3e7a99c3ff8b\">last experience with date-times</a>‚Ää‚Äî‚ÄäI really wanted the app to say <em>‚ÄúExpiring Tomorrow‚Äù </em>but didn‚Äôt really want to calculate how many days in the future an event was; that was a can of worms I wasn‚Äôt ready to¬†open.</p>\n<p>Thats when I remembered about <a href=\"https://momentjs.com/\">Moment.js</a>, a javascript package that was recommended to me after building my travel app and struggling with the conversion of all date-times to milliseconds to pass them between Ruby and Javascript. I had looked at the package documentation briefly, but had never actually implemented it.</p>\n<p>Moment.js works very much like the default Date object in Javascript, you instantiate a new Moment with an optional argument of a date-time value. If no value is provided, a date-time object representing the current date-time will be created. Moment objects have various methods that can be called on them that affect the returned¬†value:</p>\n<pre><strong>Format Dates<br></strong>moment().format(‚ÄòMMMM Do YYYY, h:mm:ss a‚Äô);<br>     // March 29th 2020, 7:25:52 pm<br>moment().format(‚Äòdddd‚Äô);<br>     // Sunday<br>moment().format(‚ÄúMMM Do YY‚Äù);<br>     // Mar 29th 20<br>moment().format();<br>     // 2020‚Äì03‚Äì29T19:25:52‚Äì04:00</pre>\n<pre><strong>Relative Time<br></strong>moment(‚Äú20111031‚Äù, ‚ÄúYYYYMMDD‚Äù).fromNow();<br>     // 8 years ago<br>moment().startOf(‚Äòday‚Äô).fromNow();<br>     // 19 hours ago<br>moment().endOf(‚Äòday‚Äô).fromNow();<br>     // in 5 hours<br>moment().startOf(‚Äòhour‚Äô).fromNow();<br>     // 26 minutes ago</pre>\n<pre><strong>Calendar/Time Math<br></strong>moment().subtract(10, ‚Äòdays‚Äô);<br>     // 03/19/2020<br>moment().subtract(6, ‚Äòdays‚Äô).calendar();<br>     // Last Monday at 7:25 PM<br>moment().subtract(3, ‚Äòdays‚Äô).calendar();<br>     // Last Thursday at 7:25 PM<br>moment().subtract(1, ‚Äòdays‚Äô).calendar();<br>     // Yesterday at 7:25 PM<br>moment().calendar();<br>     // Today at 7:25 PM<br>moment().add(1, ‚Äòdays‚Äô).calendar();<br>     // Tomorrow at 7:25 PM<br>moment().add(3, ‚Äòdays‚Äô).calendar();<br>     // Wednesday at 7:25 PM<br>moment().add(10, ‚Äòdays‚Äô).calendar();</pre>\n<pre><strong>Comparisons</strong><br>moment('2020-03-29').isSame('2020-03-29');<br>     //true<br>moment('2010-10-20').isBefore('2010-10-21');<br>     // true<br>moment('2010-10-20').isAfter('2010-10-19');<br>     // true</pre>\n<p>These formatting methods changed the game when creating this app! Using Moment.js allowed me to very easily display the number of days until something expired without having to get into complex date-time math. It even allowed me to do some conditional styling on my components! As the expiration date gets closer, the color changes. The experience was way easier than my previous attempts to compare date-times and calculate hours on my own. A wise man once said not to re-invent the wheel; I definitely agree.</p>\n<p>As for the app, it‚Äôs called expiRATION‚Äî a combination of <em>Expiration</em> and <em>Ration</em>. I‚Äôll follow up with a link once it‚Äôs live but for now you can checkout the <a href=\"https://github.com/cakeholeDC/expiration\">codebase on github</a>. It‚Äôs not really styled yet and I‚Äôm still ironing out some bugs, but my wife has started to use it to track our rations! As the inspiration behind this all, she has been a great beta tester! She even showed a few colleagues on a Zoom chat the other day; they all want to use it too! In the meantime, I‚Äôll be making the most of my quarantine by putting the finishing touches on an idea that resulted from a tough situation.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5d06634ac1cd\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "react",
        "application-development",
        "covid19",
        "innovation",
        "foodies"
      ]
    },
    {
      "title": "Cloud Computing: Web Apps at Altitude",
      "pubDate": "2020-03-17 14:48:05",
      "link": "https://medium.com/@cakehole/cloud-computing-web-apps-at-altitude-bf3d3ffe6009?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/bf3d3ffe6009",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/937/1*DCDydL1T8gvNor4GwUcwGw.png",
      "description": "\n<p>I recently took a trip to Denver to get some skiing in before the season was over. As I boarded my first leg from DCA &gt; DAL I realized that my aircraft did not have passenger entertainment systems in every seat; this was a long flight and I was on my¬†own.</p>\n<p>Shortly after takeoff there was that unmistakable <strong><em>*ding*</em></strong> followed by the announcement; <em>‚ÄúLadies and gentlemen, we have reached 10,000 feet; you may now use your approved electronic devices.‚Äù‚Ää‚Äî‚Ää</em>out comes my¬†laptop.</p>\n<p>After roughly 2 minutes of browsing through Southwest‚Äôs live TV offerings; sitcom re-runs from my youth; non-stop CNN or ESPN coverage; daytime soaps in a variety of languages‚ÄîI determined there wasn‚Äôt any content for me. Naturally, I decided to write a little sky-code instead (a new kind of cloud-computing).</p>\n<p>A few months ago I built a single-page application called <a href=\"https://www.kylepcole.com/flytinerary\">Flytinerary</a>. It‚Äôs an app to help plan and track itinerary items when traveling as a group. The idea actually stemmed from planning this very ski trip with my buddies. The app was never fully complete (they never are) so I had always intended to revisit it. It‚Äôs written in vanilla JavaScript, and ever since learning React I had been planning to rebuild the entire application anyways.</p>\n<p>So there I was, on an airplane, taking the very trip that first prompted my travel app, looking to code something. I decided to finally start Flytinerary 2.0 using React. I opened my terminal, created a few directories, typed npx create-react-app flytinerary-react and crossed my fingers. I wasn‚Äôt sure what would happen. I hadn‚Äôt paid the $8 for internet on this flight, so I definitely wasn‚Äôt connected to the NPM¬†network.</p>\n<pre>You appear to be offline.<br>Falling back to the local Yarn cache.</pre>\n<p>A warning message appeared almost immediately but the installation continued using the local Yarn cache, a locally cached copy of the package (one of the primary benefits of Yarn is that it caches packages for use offline). <a href=\"https://classic.yarnpkg.com/en/docs/cli/cache/\">Learn more about package caching from the official yarn¬†docs.</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/937/1*DCDydL1T8gvNor4GwUcwGw.png\"><figcaption>There appeared to be some sort of trouble with my network connection‚Ä¶</figcaption></figure><p>Only one error was thrown towards the end the install, a connection error to the yarn registry‚Ää‚Äî‚Ääregistry.yarnpkg.com‚Ää‚Äî‚Ääwhile trying to access a react package that was not cached locally. After the error was raised, the process continued without failure so hopefully that package wasn‚Äôt critical.</p>\n<p>After a few minutes I had a React app. But did it work? I started up the development server, navigated to localhost:3001, and was greeted with the spinning React logo. It¬†worked!</p>\n<p>I started re-creating the skeleton of the app; navigation bar, containers, components. I very quickly realized that without internet I couldn‚Äôt install my favorite packages; React Router was out for now, can‚Äôt setup Redux quite yet. Semantic UI? Nope, not today. There wasn‚Äôt too much more front-end I could build without some sort of data source; I needed a back-end.</p>\n<p>I used a Rails API for v1 of this project. I decided that if I was going to rebuild the front end then I might as well rebuild the API too ‚Äînot only have I learned a few new tricks since then, but now I had to find out if it was possible to bootstrap a Rails app without internet. If it didn‚Äôt work, I knew I could always fallback to API v1 for the time being. Back in terminal, I typed rails new flytinerary-api --api, again crossing my fingers not knowing what would happen. To my surprise, only one single error was thrown. Like React, the issue was related to fetching dependencies from index.rubygems.org and occurred towards the end of the installation.</p>\n<pre>Could not reach host index.rubygems.org<br>Check your network connection and try again</pre>\n<p>I assumed this was game over. Without access to rubygems.org there is no way that Rails was able to install all of the required dependencies. Expecting failure, I booted up my new rails server and opened the¬†browser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*Vl8B3cZvgI7n2BqXCy3iuw.png\"><figcaption>The Puma version codename gave me a good chuckle¬†too.</figcaption></figure><blockquote><strong>‚ÄúYay! You‚Äôre on¬†Rails!‚Äù</strong></blockquote>\n<p>Success! Not only did it work, it was the latest version of rails:¬†6.0.2.1.</p>\n<p><em>Authors Note: I do work with rails regularly, so the core rails gems are likely installed on my system already. I assume this would not have worked otherwise.</em></p>\n<p>This is the point when I generally start committing and pushing to github‚Ää‚Äî‚Ääbut since that wasn‚Äôt an option I‚Äôd be committing locally for the time being (I pushed during my layover). I created a branch and started generating my resources, setting up my routes, and configuring my controllers.</p>\n<p>Once my API was loosely setup I returned to my React app and fetched some seed data. I continued to build out a skeleton of the app as best as I could, implementing only basic CRUD actions for now. Without internet, I didn‚Äôt have google as a resource;<strong> </strong><em>that was definitely a struggle</em>. I didn‚Äôt realize how much I relied on stack-overflow posts and ruby docs when doing initial app setup‚Äîboth front and back¬†end.</p>\n<p>Instead, I had to rely on my memory and past code. I found myself referencing a previous project for the syntax of has_many,¬†:through (I <em>always</em> misplace the comma üôÑ) and revisiting code from only days prior trying to to remember how to properly use reduce()‚Äî It was a fun challenge.</p>\n<p>About three hours into my flight, there was that unmistakable <strong><em>*ding*</em></strong> again‚Äî <em>‚ÄúLadies and Gentlemen, we are beginning our descent into Dallas. At this time we ask that you please stow your electronic devices and prepare for landing‚Äù‚Äî</em> I had reached the end of my¬†timebox.</p>\n<p>I smiled as I closed my laptop. While it definitely needed more work, I had created a functional web application at 30,000 feet in the air, without ever connecting to the¬†web.</p>\n<h3>Three Things I¬†Learned‚Ä¶</h3>\n<ol>\n<li>\n<strong>Plan Ahead</strong>. If you want to build an app on a plane, think about what packages or gems you might want to use. Bootstrap the app in advance and install all your dependencies. During my layover, I installed all my missing dependencies. Coding on the second leg of my flight felt less hacky and was way more productive (granted, I had already done the tedious initial setup on the first¬†flight).</li>\n<li>\n<strong>Trust Your Instincts.</strong> As coders it‚Äôs impossible to memorize every method and remember proper syntax for everything, but you‚Äôve done it before. When I trusted my instincts and just <em>tried</em> something, I was often right. I have found that I tend to use google to confirm my assumptions, rather than to find the answer. Trust those assumptions.</li>\n<li>\n<strong>Be Resourceful.</strong> It‚Äôs easy to use google to confirm assumptions or find an answer. But there are always other ways that actually may be more beneficial. When I was forced to reference previous code I had written I was able to recall <em>how</em> or <em>why </em>I used that particular function rather than just what the syntax should be. Making these practical connections always helps me retain the information in the long¬†term.</li>\n</ol>\n<p>All in all, this was an extremely fun exercise that I would recommend to any developer who is looking to challenge their coding skills. You don‚Äôt have to be on an airplane either; you can do this at home! Disconnect your computer from the internet and see what you can build without referencing any documentation. You‚Äôll be pleasantly surprised how much you actually do remember.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bf3d3ffe6009\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>I recently took a trip to Denver to get some skiing in before the season was over. As I boarded my first leg from DCA &gt; DAL I realized that my aircraft did not have passenger entertainment systems in every seat; this was a long flight and I was on my¬†own.</p>\n<p>Shortly after takeoff there was that unmistakable <strong><em>*ding*</em></strong> followed by the announcement; <em>‚ÄúLadies and gentlemen, we have reached 10,000 feet; you may now use your approved electronic devices.‚Äù‚Ää‚Äî‚Ää</em>out comes my¬†laptop.</p>\n<p>After roughly 2 minutes of browsing through Southwest‚Äôs live TV offerings; sitcom re-runs from my youth; non-stop CNN or ESPN coverage; daytime soaps in a variety of languages‚ÄîI determined there wasn‚Äôt any content for me. Naturally, I decided to write a little sky-code instead (a new kind of cloud-computing).</p>\n<p>A few months ago I built a single-page application called <a href=\"https://www.kylepcole.com/flytinerary\">Flytinerary</a>. It‚Äôs an app to help plan and track itinerary items when traveling as a group. The idea actually stemmed from planning this very ski trip with my buddies. The app was never fully complete (they never are) so I had always intended to revisit it. It‚Äôs written in vanilla JavaScript, and ever since learning React I had been planning to rebuild the entire application anyways.</p>\n<p>So there I was, on an airplane, taking the very trip that first prompted my travel app, looking to code something. I decided to finally start Flytinerary 2.0 using React. I opened my terminal, created a few directories, typed npx create-react-app flytinerary-react and crossed my fingers. I wasn‚Äôt sure what would happen. I hadn‚Äôt paid the $8 for internet on this flight, so I definitely wasn‚Äôt connected to the NPM¬†network.</p>\n<pre>You appear to be offline.<br>Falling back to the local Yarn cache.</pre>\n<p>A warning message appeared almost immediately but the installation continued using the local Yarn cache, a locally cached copy of the package (one of the primary benefits of Yarn is that it caches packages for use offline). <a href=\"https://classic.yarnpkg.com/en/docs/cli/cache/\">Learn more about package caching from the official yarn¬†docs.</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/937/1*DCDydL1T8gvNor4GwUcwGw.png\"><figcaption>There appeared to be some sort of trouble with my network connection‚Ä¶</figcaption></figure><p>Only one error was thrown towards the end the install, a connection error to the yarn registry‚Ää‚Äî‚Ääregistry.yarnpkg.com‚Ää‚Äî‚Ääwhile trying to access a react package that was not cached locally. After the error was raised, the process continued without failure so hopefully that package wasn‚Äôt critical.</p>\n<p>After a few minutes I had a React app. But did it work? I started up the development server, navigated to localhost:3001, and was greeted with the spinning React logo. It¬†worked!</p>\n<p>I started re-creating the skeleton of the app; navigation bar, containers, components. I very quickly realized that without internet I couldn‚Äôt install my favorite packages; React Router was out for now, can‚Äôt setup Redux quite yet. Semantic UI? Nope, not today. There wasn‚Äôt too much more front-end I could build without some sort of data source; I needed a back-end.</p>\n<p>I used a Rails API for v1 of this project. I decided that if I was going to rebuild the front end then I might as well rebuild the API too ‚Äînot only have I learned a few new tricks since then, but now I had to find out if it was possible to bootstrap a Rails app without internet. If it didn‚Äôt work, I knew I could always fallback to API v1 for the time being. Back in terminal, I typed rails new flytinerary-api --api, again crossing my fingers not knowing what would happen. To my surprise, only one single error was thrown. Like React, the issue was related to fetching dependencies from index.rubygems.org and occurred towards the end of the installation.</p>\n<pre>Could not reach host index.rubygems.org<br>Check your network connection and try again</pre>\n<p>I assumed this was game over. Without access to rubygems.org there is no way that Rails was able to install all of the required dependencies. Expecting failure, I booted up my new rails server and opened the¬†browser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*Vl8B3cZvgI7n2BqXCy3iuw.png\"><figcaption>The Puma version codename gave me a good chuckle¬†too.</figcaption></figure><blockquote><strong>‚ÄúYay! You‚Äôre on¬†Rails!‚Äù</strong></blockquote>\n<p>Success! Not only did it work, it was the latest version of rails:¬†6.0.2.1.</p>\n<p><em>Authors Note: I do work with rails regularly, so the core rails gems are likely installed on my system already. I assume this would not have worked otherwise.</em></p>\n<p>This is the point when I generally start committing and pushing to github‚Ää‚Äî‚Ääbut since that wasn‚Äôt an option I‚Äôd be committing locally for the time being (I pushed during my layover). I created a branch and started generating my resources, setting up my routes, and configuring my controllers.</p>\n<p>Once my API was loosely setup I returned to my React app and fetched some seed data. I continued to build out a skeleton of the app as best as I could, implementing only basic CRUD actions for now. Without internet, I didn‚Äôt have google as a resource;<strong> </strong><em>that was definitely a struggle</em>. I didn‚Äôt realize how much I relied on stack-overflow posts and ruby docs when doing initial app setup‚Äîboth front and back¬†end.</p>\n<p>Instead, I had to rely on my memory and past code. I found myself referencing a previous project for the syntax of has_many,¬†:through (I <em>always</em> misplace the comma üôÑ) and revisiting code from only days prior trying to to remember how to properly use reduce()‚Äî It was a fun challenge.</p>\n<p>About three hours into my flight, there was that unmistakable <strong><em>*ding*</em></strong> again‚Äî <em>‚ÄúLadies and Gentlemen, we are beginning our descent into Dallas. At this time we ask that you please stow your electronic devices and prepare for landing‚Äù‚Äî</em> I had reached the end of my¬†timebox.</p>\n<p>I smiled as I closed my laptop. While it definitely needed more work, I had created a functional web application at 30,000 feet in the air, without ever connecting to the¬†web.</p>\n<h3>Three Things I¬†Learned‚Ä¶</h3>\n<ol>\n<li>\n<strong>Plan Ahead</strong>. If you want to build an app on a plane, think about what packages or gems you might want to use. Bootstrap the app in advance and install all your dependencies. During my layover, I installed all my missing dependencies. Coding on the second leg of my flight felt less hacky and was way more productive (granted, I had already done the tedious initial setup on the first¬†flight).</li>\n<li>\n<strong>Trust Your Instincts.</strong> As coders it‚Äôs impossible to memorize every method and remember proper syntax for everything, but you‚Äôve done it before. When I trusted my instincts and just <em>tried</em> something, I was often right. I have found that I tend to use google to confirm my assumptions, rather than to find the answer. Trust those assumptions.</li>\n<li>\n<strong>Be Resourceful.</strong> It‚Äôs easy to use google to confirm assumptions or find an answer. But there are always other ways that actually may be more beneficial. When I was forced to reference previous code I had written I was able to recall <em>how</em> or <em>why </em>I used that particular function rather than just what the syntax should be. Making these practical connections always helps me retain the information in the long¬†term.</li>\n</ol>\n<p>All in all, this was an extremely fun exercise that I would recommend to any developer who is looking to challenge their coding skills. You don‚Äôt have to be on an airplane either; you can do this at home! Disconnect your computer from the internet and see what you can build without referencing any documentation. You‚Äôll be pleasantly surprised how much you actually do remember.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bf3d3ffe6009\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "rails",
        "travel",
        "react",
        "software-engineering",
        "web-development"
      ]
    },
    {
      "title": "display: flex-grid v0.5",
      "pubDate": "2020-02-09 05:47:56",
      "link": "https://medium.com/@cakehole/micro-blog-ive-been-struggling-with-getting-elements-to-be-where-i-want-them-in-an-app-i-m-47303c8de83b?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/47303c8de83b",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*RTM5nUISCNJbl_yOZTO7WQ.png",
      "description": "\n<p><strong>Micro Blog:</strong> I‚Äôve been struggling with getting elements to be where I want them in an app I‚Äôm currently working on (more on that later). It works on mobile. but not desktop. I fix one, and the other breaks. Everything I google brings me back to CSS grid and¬†flexbox.</p>\n<p>That‚Äôs great, but, <em>I‚Äôm new to this and I don‚Äôt fully understand the core concepts behind grid and flexbox; the differences between them; and when to use which.</em> I‚Äôve read several articles and watched a few tutorials now, but none really clarified my pain¬†points.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RTM5nUISCNJbl_yOZTO7WQ.png\"><figcaption>Grids, amirite?</figcaption></figure><p>I finally found these tutorials from <a href=\"https://link.medium.com/LcXiMJdJV3\">Traversy Media</a> that really break it down in a way that worked for me‚Ää‚Äî‚Äädirect and to the point, but assumes you know nothing (that‚Äôs a good¬†thing).</p>\n<p>So, if you‚Äôre struggling with how to position your elements while styling your apps, I‚Äôd highly recommend you take some time to watch these two tutorials to understand the basics, how to build off them, and why they work that way (he also has a wicked Boston¬†accent).</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=jV8B24rSN5o\">grid (27¬†min)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JJSoEo8JSnc\">flexbawx (20¬†min)</a></li>\n</ul>\n<p>Before attempting any major CSS refactors, always create a new branch on your repo: <em>git checkout -b css-grid-flexbox</em></p>\n<p><strong>I guarantee you‚Äôll break¬†stuff.</strong></p>\n<p>I need a little more practice before I can share best practices with you; but trial and error is one of my specialties so I‚Äôll report back¬†soon.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=47303c8de83b\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p><strong>Micro Blog:</strong> I‚Äôve been struggling with getting elements to be where I want them in an app I‚Äôm currently working on (more on that later). It works on mobile. but not desktop. I fix one, and the other breaks. Everything I google brings me back to CSS grid and¬†flexbox.</p>\n<p>That‚Äôs great, but, <em>I‚Äôm new to this and I don‚Äôt fully understand the core concepts behind grid and flexbox; the differences between them; and when to use which.</em> I‚Äôve read several articles and watched a few tutorials now, but none really clarified my pain¬†points.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RTM5nUISCNJbl_yOZTO7WQ.png\"><figcaption>Grids, amirite?</figcaption></figure><p>I finally found these tutorials from <a href=\"https://link.medium.com/LcXiMJdJV3\">Traversy Media</a> that really break it down in a way that worked for me‚Ää‚Äî‚Äädirect and to the point, but assumes you know nothing (that‚Äôs a good¬†thing).</p>\n<p>So, if you‚Äôre struggling with how to position your elements while styling your apps, I‚Äôd highly recommend you take some time to watch these two tutorials to understand the basics, how to build off them, and why they work that way (he also has a wicked Boston¬†accent).</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=jV8B24rSN5o\">grid (27¬†min)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JJSoEo8JSnc\">flexbawx (20¬†min)</a></li>\n</ul>\n<p>Before attempting any major CSS refactors, always create a new branch on your repo: <em>git checkout -b css-grid-flexbox</em></p>\n<p><strong>I guarantee you‚Äôll break¬†stuff.</strong></p>\n<p>I need a little more practice before I can share best practices with you; but trial and error is one of my specialties so I‚Äôll report back¬†soon.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=47303c8de83b\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "flexbox",
        "grid-layout",
        "scss",
        "design",
        "css"
      ]
    },
    {
      "title": "Component className=‚Äúui card align center float left‚Äù",
      "pubDate": "2020-01-23 02:26:59",
      "link": "https://medium.com/@cakehole/framework-component-classname-ui-card-align-center-float-left-60c9f65106fc?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/60c9f65106fc",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/628/1*dpQI218WBE3JneITSdwUfw.png",
      "description": "\n<p>If you‚Äôve ever had any exposure to web design, or software engineering you‚Äôve probably been exposed to some sort of framework. Regardless of whether you were working with <a href=\"https://material-ui.com/\">Material</a>, <a href=\"https://getbootstrap.com/\">Bootstrap</a>, <a href=\"https://semantic-ui.com/\">Semantic UI</a>, or <a href=\"https://foundation.zurb.com/\">Foundation</a>‚Äî they all work largely the same way. The basic concept behind most major frameworks (particularly CSS frameworks) is:</p>\n<blockquote>if you use a predefined element structure in your HTML, and those elements have specific predefined CSS classes, then your web page will display in a fancy¬†way.</blockquote>\n<p>In its most basic form, a CSS framework is essentially a collection of CSS stylesheets that are tailored for use in common situations, like setting up menu bars, buttons, and¬†forms.</p>\n<figure><img alt=\"A sample of a Semantic UI card component.\" src=\"https://cdn-images-1.medium.com/max/628/1*dpQI218WBE3JneITSdwUfw.png\"><figcaption>Hi Kristy¬†üëã</figcaption></figure><p><strong>How do you use a framework?</strong></p>\n<p>When the time came to implement a framework in your web app, you likely started out by looking through the documentation for one of the more popular frameworks like Bootstrap or Semantic for some styled elements that you wanted to reuse. Once you found one you liked, you clicked a button that said <em>‚ÄúTry Me‚Äù </em>or <em>‚ÄúView Code‚Äù</em> and were then presented with a HTML template.</p>\n<p>For example, Semantic has something called a 'card' which you‚Äôve probably seen all over the internet (looks kind of like Facebook, eh?).</p>\n<p>The HTML code for a card is as¬†follows:</p>\n<figure><img alt=\"The HTML syntax for creating a Card component.\" src=\"https://cdn-images-1.medium.com/max/902/1*yJAG_Jv79UVwYWpa5t4tkA.png\"></figure><p>Wow, that‚Äôs a lot of code for a glorified image with a¬†caption.</p>\n<p>Ok, well, if I want to use this element then I guess I have no choice but to copy this code verbatim and change the content to match my needs. I then need to make sure that I import the supporting CSS styles from a CDN (and no, that‚Äôs not code from Canada) so that all these class names can get adequately styled.</p>\n<pre>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"&gt;</pre>\n<p>Alright so now that you‚Äôve copied the HTML template and imported the stylesheet your card looks great! Now it‚Äôs time to style the rest of the cards within your app. Go ahead and copy &amp; paste the HTML template again, now update all the content. I‚Äôll¬†wait‚Ä¶</p>\n<p>Wow, those look fantastic! Oh, you wanted them to display in a nice grid layout? Well why didn‚Äôt you say so‚Äîthat‚Äôs a <strong><em>different</em></strong> HTML template. Better go back and rework those other cards¬†now.</p>\n<p>Hopefully you‚Äôve decided by now to use some OO Javascript principles (or even better, React) to help manage this process. If not, you should rethink your app design immediately; <em>that‚Äôs a </em><strong><em>huge</em></strong><em>¬†</em><em>.html file¬†dude.</em></p>\n<a href=\"https://medium.com/media/64136941fdd9dcbe1d89186bdb75b42b/href\">https://medium.com/media/64136941fdd9dcbe1d89186bdb75b42b/href</a><p>Great, now that you‚Äôve refactored your app to have some sense of hierarchy it‚Äôs time to start building out the rest of our app using more HTML templates with even more classes. We just need a nav bar, action menu, login form, search bar, and a pop-up window. BOOM¬†web-app!</p>\n<p>Not so¬†fast.</p>\n<p><em>(From this point forward, I‚Äôm assuming you‚Äôve refactored using¬†React.)</em></p>\n<p>What if 14 months from now your users demand more features? Obviously your super successful app has grown to 5,000 (beta) users by¬†now.</p>\n<p>Just find every place you used the card template and add another&lt;div&gt; where needed right? <em>Oh shoot, how does Semantic handle circular images again? That‚Äôs all the rave for profile pics right now.</em> Look up HTML template; copy, paste, update content. Panic. <em>This doesn‚Äôt look like the sample. Oh right, its ‚Äò</em><strong><em>className‚Äô</em></strong><em> not ‚Äò</em><strong><em>class‚Äô ‚Äî</em></strong>Rinse and¬†repeat.</p>\n<p>What if I told you that you never had to copy and paste an HTML template again? Well, if I did I‚Äôd be lying because I can‚Äôt guarantee that. But what I can do is show you a better way to use these <strong><em>components</em></strong> in your application.</p>\n<p>Most of the popular CSS frameworks also have React Component Libraries. What that means is that they‚Äôve done the repeat work for you. These frameworks provide a a collection of <em>React.Components</em> that you can import into your React application‚Ää‚Äî‚Ääand thus reuse‚Ää‚Äî‚Ääthroughout your application by simply calling the &lt;Component /&gt; name within your¬†JSX.</p>\n<p>Let‚Äôs go back to that Semantic card example from earlier. Remember that 20 line HTML template? With the React component we can write that in 7¬†lines.</p>\n<figure><img alt=\"React shorthand props for creating the card component.\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q7DFstq4criAjm3qPUxybg.png\"><figcaption>Fine. It‚Äôs <strong>8 lines</strong> with the¬†import.</figcaption></figure><p>What‚Äôs happening here? Well, on line 2 we‚Äôre rendering a &lt;Card&gt; component with the <em>props</em> of image, header, meta, description, and extra. Those just so happen to be the exact same properties that we set using a set of &lt;div&gt;‚Äôs when using the HTML templates.</p>\n<p>Coincidence? ü§î</p>\n<p>So where does the component come from? It‚Äôs clear from line one that we import Card from ‚Äòsemantic-ui-react‚Äô‚Ää‚Äî‚Ääwhich is this particular framework‚Äôs package of React Components. Before you are allowed to import components from a framework, you have to physically install the node package using npm/yarn.</p>\n<p><a href=\"https://react.semantic-ui.com/usage\"><strong>Semantic</strong></a><strong>:</strong> yarn add semantic-ui-react<br><a href=\"https://react-bootstrap.github.io/getting-started/introduction/\"><strong>Bootstrap</strong></a><strong>:</strong> npm install react-bootstrap bootstrap<br><a href=\"https://material-ui.com/getting-started/installation/\"><strong>Material</strong></a><strong>:</strong> npm install <a href=\"http://twitter.com/material\">@material</a>-ui/core or yarn add <a href=\"http://twitter.com/material\">@material</a>-ui/core</p>\n<p><em>**The three frameworks listed above also require the installation of CSS styling through </em><em>npm/yarn and/or </em><em>cdn delivery. For instructions on installing other frameworks, search for </em><em>[framework] react npm install and follow those instructions.</em></p>\n<p><a href=\"https://www.codeinwp.com/blog/react-ui-component-libraries-frameworks/\">Top 20 React UI Component Libraries for¬†2020</a></p>\n<p>Once you have installed and imported all the necessary dependencies for the framework of your choice, you‚Äôre ready to start building out v2.0 of your app leveraging the power of a React framework.</p>\n<p>When <a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking In React</a> <em>(if you haven‚Äôt read this from the official react.js docs please do so now)</em> we break our UI into a hierarchy of components so that each individual piece of our app is easier to manage. When we imported a framework, what we imported was a set of these components along‚Äîwith their required styles (the most desirable part of a framework, IMO).</p>\n<h4>Is one framework best?</h4>\n<p>No.</p>\n<p>Importing a ui framework allows us to design our app‚Äôs component hierarchy with the components we want to use, such as &lt;Card&gt;, in mind. When we plan for a card, we can plan for having a &lt;Card.Group items={2} /&gt; in one view with profile data for some co-founders, and a &lt;Card.Group items={6} /&gt; in another view with a grid layout for recent supporters. Both views contain <strong><em>identical</em></strong> cards, yet they look totally different and contain different data.</p>\n<p>My advice? If you‚Äôve chosen to use a framework with React.js and are looking for documentation, be sure to include the keyword 'react' in your search query. I specifically chose to use Semantic as an example in this post because if (like me) you were to search for 'semantic framework' the most prominent results will be for semantic-ui.com which (strangely) only contains the HTML templates and their corresponding instructions.</p>\n<p>Including the keyword react will land you at something react specific, in this case react.semantic-ui.com. A subdomain which, as of writing this article, I have not found a way to access from the main¬†website.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=60c9f65106fc\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>If you‚Äôve ever had any exposure to web design, or software engineering you‚Äôve probably been exposed to some sort of framework. Regardless of whether you were working with <a href=\"https://material-ui.com/\">Material</a>, <a href=\"https://getbootstrap.com/\">Bootstrap</a>, <a href=\"https://semantic-ui.com/\">Semantic UI</a>, or <a href=\"https://foundation.zurb.com/\">Foundation</a>‚Äî they all work largely the same way. The basic concept behind most major frameworks (particularly CSS frameworks) is:</p>\n<blockquote>if you use a predefined element structure in your HTML, and those elements have specific predefined CSS classes, then your web page will display in a fancy¬†way.</blockquote>\n<p>In its most basic form, a CSS framework is essentially a collection of CSS stylesheets that are tailored for use in common situations, like setting up menu bars, buttons, and¬†forms.</p>\n<figure><img alt=\"A sample of a Semantic UI card component.\" src=\"https://cdn-images-1.medium.com/max/628/1*dpQI218WBE3JneITSdwUfw.png\"><figcaption>Hi Kristy¬†üëã</figcaption></figure><p><strong>How do you use a framework?</strong></p>\n<p>When the time came to implement a framework in your web app, you likely started out by looking through the documentation for one of the more popular frameworks like Bootstrap or Semantic for some styled elements that you wanted to reuse. Once you found one you liked, you clicked a button that said <em>‚ÄúTry Me‚Äù </em>or <em>‚ÄúView Code‚Äù</em> and were then presented with a HTML template.</p>\n<p>For example, Semantic has something called a 'card' which you‚Äôve probably seen all over the internet (looks kind of like Facebook, eh?).</p>\n<p>The HTML code for a card is as¬†follows:</p>\n<figure><img alt=\"The HTML syntax for creating a Card component.\" src=\"https://cdn-images-1.medium.com/max/902/1*yJAG_Jv79UVwYWpa5t4tkA.png\"></figure><p>Wow, that‚Äôs a lot of code for a glorified image with a¬†caption.</p>\n<p>Ok, well, if I want to use this element then I guess I have no choice but to copy this code verbatim and change the content to match my needs. I then need to make sure that I import the supporting CSS styles from a CDN (and no, that‚Äôs not code from Canada) so that all these class names can get adequately styled.</p>\n<pre>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"&gt;</pre>\n<p>Alright so now that you‚Äôve copied the HTML template and imported the stylesheet your card looks great! Now it‚Äôs time to style the rest of the cards within your app. Go ahead and copy &amp; paste the HTML template again, now update all the content. I‚Äôll¬†wait‚Ä¶</p>\n<p>Wow, those look fantastic! Oh, you wanted them to display in a nice grid layout? Well why didn‚Äôt you say so‚Äîthat‚Äôs a <strong><em>different</em></strong> HTML template. Better go back and rework those other cards¬†now.</p>\n<p>Hopefully you‚Äôve decided by now to use some OO Javascript principles (or even better, React) to help manage this process. If not, you should rethink your app design immediately; <em>that‚Äôs a </em><strong><em>huge</em></strong><em>¬†</em><em>.html file¬†dude.</em></p>\n<a href=\"https://medium.com/media/64136941fdd9dcbe1d89186bdb75b42b/href\">https://medium.com/media/64136941fdd9dcbe1d89186bdb75b42b/href</a><p>Great, now that you‚Äôve refactored your app to have some sense of hierarchy it‚Äôs time to start building out the rest of our app using more HTML templates with even more classes. We just need a nav bar, action menu, login form, search bar, and a pop-up window. BOOM¬†web-app!</p>\n<p>Not so¬†fast.</p>\n<p><em>(From this point forward, I‚Äôm assuming you‚Äôve refactored using¬†React.)</em></p>\n<p>What if 14 months from now your users demand more features? Obviously your super successful app has grown to 5,000 (beta) users by¬†now.</p>\n<p>Just find every place you used the card template and add another&lt;div&gt; where needed right? <em>Oh shoot, how does Semantic handle circular images again? That‚Äôs all the rave for profile pics right now.</em> Look up HTML template; copy, paste, update content. Panic. <em>This doesn‚Äôt look like the sample. Oh right, its ‚Äò</em><strong><em>className‚Äô</em></strong><em> not ‚Äò</em><strong><em>class‚Äô ‚Äî</em></strong>Rinse and¬†repeat.</p>\n<p>What if I told you that you never had to copy and paste an HTML template again? Well, if I did I‚Äôd be lying because I can‚Äôt guarantee that. But what I can do is show you a better way to use these <strong><em>components</em></strong> in your application.</p>\n<p>Most of the popular CSS frameworks also have React Component Libraries. What that means is that they‚Äôve done the repeat work for you. These frameworks provide a a collection of <em>React.Components</em> that you can import into your React application‚Ää‚Äî‚Ääand thus reuse‚Ää‚Äî‚Ääthroughout your application by simply calling the &lt;Component /&gt; name within your¬†JSX.</p>\n<p>Let‚Äôs go back to that Semantic card example from earlier. Remember that 20 line HTML template? With the React component we can write that in 7¬†lines.</p>\n<figure><img alt=\"React shorthand props for creating the card component.\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q7DFstq4criAjm3qPUxybg.png\"><figcaption>Fine. It‚Äôs <strong>8 lines</strong> with the¬†import.</figcaption></figure><p>What‚Äôs happening here? Well, on line 2 we‚Äôre rendering a &lt;Card&gt; component with the <em>props</em> of image, header, meta, description, and extra. Those just so happen to be the exact same properties that we set using a set of &lt;div&gt;‚Äôs when using the HTML templates.</p>\n<p>Coincidence? ü§î</p>\n<p>So where does the component come from? It‚Äôs clear from line one that we import Card from ‚Äòsemantic-ui-react‚Äô‚Ää‚Äî‚Ääwhich is this particular framework‚Äôs package of React Components. Before you are allowed to import components from a framework, you have to physically install the node package using npm/yarn.</p>\n<p><a href=\"https://react.semantic-ui.com/usage\"><strong>Semantic</strong></a><strong>:</strong> yarn add semantic-ui-react<br><a href=\"https://react-bootstrap.github.io/getting-started/introduction/\"><strong>Bootstrap</strong></a><strong>:</strong> npm install react-bootstrap bootstrap<br><a href=\"https://material-ui.com/getting-started/installation/\"><strong>Material</strong></a><strong>:</strong> npm install <a href=\"http://twitter.com/material\">@material</a>-ui/core or yarn add <a href=\"http://twitter.com/material\">@material</a>-ui/core</p>\n<p><em>**The three frameworks listed above also require the installation of CSS styling through </em><em>npm/yarn and/or </em><em>cdn delivery. For instructions on installing other frameworks, search for </em><em>[framework] react npm install and follow those instructions.</em></p>\n<p><a href=\"https://www.codeinwp.com/blog/react-ui-component-libraries-frameworks/\">Top 20 React UI Component Libraries for¬†2020</a></p>\n<p>Once you have installed and imported all the necessary dependencies for the framework of your choice, you‚Äôre ready to start building out v2.0 of your app leveraging the power of a React framework.</p>\n<p>When <a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking In React</a> <em>(if you haven‚Äôt read this from the official react.js docs please do so now)</em> we break our UI into a hierarchy of components so that each individual piece of our app is easier to manage. When we imported a framework, what we imported was a set of these components along‚Äîwith their required styles (the most desirable part of a framework, IMO).</p>\n<h4>Is one framework best?</h4>\n<p>No.</p>\n<p>Importing a ui framework allows us to design our app‚Äôs component hierarchy with the components we want to use, such as &lt;Card&gt;, in mind. When we plan for a card, we can plan for having a &lt;Card.Group items={2} /&gt; in one view with profile data for some co-founders, and a &lt;Card.Group items={6} /&gt; in another view with a grid layout for recent supporters. Both views contain <strong><em>identical</em></strong> cards, yet they look totally different and contain different data.</p>\n<p>My advice? If you‚Äôve chosen to use a framework with React.js and are looking for documentation, be sure to include the keyword 'react' in your search query. I specifically chose to use Semantic as an example in this post because if (like me) you were to search for 'semantic framework' the most prominent results will be for semantic-ui.com which (strangely) only contains the HTML templates and their corresponding instructions.</p>\n<p>Including the keyword react will land you at something react specific, in this case react.semantic-ui.com. A subdomain which, as of writing this article, I have not found a way to access from the main¬†website.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=60c9f65106fc\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "react",
        "design",
        "front-end-development",
        "framework",
        "ui-design"
      ]
    },
    {
      "title": "new Date(DateTime.new(Time.now))",
      "pubDate": "2020-01-02 02:58:14",
      "link": "https://medium.com/@cakehole/new-date-datetime-new-time-now-3e7a99c3ff8b?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/3e7a99c3ff8b",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*IeZN8OBkzmIGfLlfwu0JHA.jpeg",
      "description": "\n<p>As humans, we need to keep track of the passage of time. Early humans relied on nature. Changing seasons, rising suns, and annual animal migrations were signals that these hunter/gathers had to get to work, or start storing food for the cold¬†seasons.</p>\n<p>As society grew, we needed a better way to keep track of it all. A central system that everyone could refer to and rely on together. Ultimately, we created the concepts of <strong>Time</strong>, and¬†<strong>Date</strong>.</p>\n<p>Technically speaking, <strong><em>Time</em></strong><em> is the indefinite continued progress of existence and events that occur in an apparently irreversible succession from the past, through the present, to the¬†future.</em></p>\n<a href=\"https://medium.com/media/dba28571b619a88f1ed1ce2cbcc78a00/href\">https://medium.com/media/dba28571b619a88f1ed1ce2cbcc78a00/href</a><p>For this exercise, let‚Äôs look past this existential defintion of time and focus on the <strong>physical measurement</strong> of time; or <a href=\"https://en.wikipedia.org/wiki/Time#Units_of_time\">Units of¬†Time</a>.</p>\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/International_System_of_Units\">International System of Units (SI)</a>, the most universally accepted standard for measuring time,<strong> time is measured in seconds, </strong>the<strong> </strong>duration of which has something to do with vibrations of the cesium-133 atom. Just add¬†math!</p>\n<p>Ok, now that we know what time is and how humans track it. Let‚Äôs talk about how computers keep track of¬†time.</p>\n<p>Computers use something called <em>DateTime</em> to keep track of both Time and Date. Your standard SI DateTime string looks like¬†this:</p>\n<pre>YYYY-MM-DD HH:MM:SS UTC</pre>\n<p>Ok, that‚Äôs easy right? I just have to remember that the Year comes first, followed by the month, then the day, then the¬†time!</p>\n<p>Not so fast. More often than not, this DateTime format is now how we want to present the information to our users. Maybe we want the word <em>November </em>instead of the number <em>11?</em> What if we wanted to include the day of the week? That‚Äôs not even included in our DateTime string? While all computers <strong>do</strong> use DateTime, not all programming languages process DateTime the same way. This creates some problems for programmers.</p>\n<h3>Ruby &amp;¬†Rails</h3>\n<p>Rails is a common backend framework. Ruby has one main Date class, which contains a subclass of DateTime. These two work more or less the same way. The main difference is that DateTime also handles Time (Date also contains a subclass of Time, but more on that¬†later).</p>\n<pre>Date.new(2001,2,3)<br><strong>#=&gt; #&lt;Date: 2001‚Äì02‚Äì03&gt;<br></strong>DateTime.new(2001,2,3,4,5,6)<br><strong>#=&gt; #&lt;DateTime: 2001‚Äì02‚Äì03T04:05:06+00:00&gt;</strong></pre>\n<p>Both Date and DateTime can also be created using one of the <a href=\"https://ruby-doc.org/stdlib-2.6.1/libdoc/date/rdoc/Date.html\">following methods</a>:</p>\n<pre>:new() <strong>#=&gt; accepts comma separated arguments</strong><br>:jd() <strong>#=&gt; accepts chronological </strong><a href=\"https://en.wikipedia.org/wiki/Julian_day\"><strong>Julian day</strong></a><strong> number</strong><br>:ordinal() <strong>#=&gt; accepts given </strong><a href=\"https://en.wikipedia.org/wiki/Ordinal_date\"><strong>ordinal date</strong></a><strong>.</strong><br>:parse() <strong>#=&gt; accepts a representation of DateTime and parses the input</strong><br>:strptime() <strong>#=&gt; accepts representation of Time, and output template</strong><br>:today() <strong>#=&gt; returns the present day / current time</strong></pre>\n<p>No matter how they are created, Ruby returns dates as a string using the standard SI DateTime format: YYYY-MM-DD HH:MM:SS¬†UTC</p>\n<h3>Javascript</h3>\n<p>Javascript, one of the core technologies of the World Wide Web, also processes dates using Date¬†objects.</p>\n<pre>new Date(‚Äú2020‚Äì01‚Äì01‚Äù)<br><strong>//=&gt; Wed Jan 01 2020 20:00:00 GMT-0400</strong></pre>\n<p>Javascript Dates can also be created with multiple¬†methods:</p>\n<pre>new Date()<br><strong>//=&gt; returns current date/time</strong><br>new Date(<em>milliseconds</em>)<br><strong>//=&gt; milliseconds since 1970‚Äì01‚Äì01 00:00:00 UTC</strong><br>new Date(<em>dateString</em>)<br><strong>//=&gt; parses a date string</strong><br>new Date(<em>year</em>, <em>month</em>, <em>day</em>, <em>hours</em>, <em>minutes</em>, <em>seconds</em>, <em>milliseconds</em>)<br><strong>//=&gt; comma separated arguments</strong></pre>\n<p>No matter how they are created, Javascript returns Dates using the format: Wed Jan 01 2020 20:00:00¬†GMT-0400</p>\n<p>‚Äî</p>\n<p>If you‚Äôre paying attention, you may have noticed that our front end and our back end are now using different date formats. This is problematic. What if we had a datetime-local input field on a web form. When we submit that form to our database Javascript is going to generate a Date object and send its returned value to Rails where it will be converted into a Ruby Date object. If we haven‚Äôt setup our rails controller properly, Ruby won‚Äôt recognize the¬†date.</p>\n<pre>Date.new(‚ÄòWed Jan 01 2020 20:00:00 GMT-0400‚Äô)<br>DateTime.new(‚ÄòWed Jan 01 2020 20:00:00 GMT-0400‚Äô)</pre>\n<p>Both of these examples will fail because the input string does not match the expected arguments of:new().</p>\n<p>Likewise, if Rails passed a DateTime object to JavaScript in order to prefill that same input field JavaScript could have issues too if you‚Äôre not¬†careful.</p>\n<h3>So, what‚Äôs the best practice?</h3>\n<p>If you‚Äôre careful about how you initialize your DateTime objects you can make them flexible enough to work across multiple languages. For example, both Ruby and JavaScript allow for creation using string parsing Date.parse(dateString) and new Date(<em>dateString</em>) respectively.</p>\n<figure><img alt=\"A picture of antique watches.\" src=\"https://cdn-images-1.medium.com/max/1024/1*IeZN8OBkzmIGfLlfwu0JHA.jpeg\"><figcaption>‚ÄúTime is an illusion.‚Äù <strong>-Albert¬†Einstein</strong></figcaption></figure><p>Another approach is to convert all your DateTimes to <strong>milliseconds</strong>. JavaScript has out of the box support for milliseconds using new Date(<em>milliseconds</em>), but Ruby‚Äôs Date class does not. However, Ruby actually has another class called Time, which <a href=\"https://ruby-doc.org/core-2.2.2/Time.html\">ruby-docs</a> defines as an <em>abstraction of Date. </em>Unlike Date, Time has a way to handle <em>seconds</em>: Time.at(seconds) and thanks to math we know how to convert <em>seconds</em> into milliseconds.</p>\n<pre># JAVASCRIPT<br>const milliseconds = 946702800<br>new Date(milliseconds)<br><strong>#=&gt; 1999-12-31 23:00:00 -0600</strong></pre>\n<pre># RUBY<br>milliseconds = 946702800<br>Time.at(milliseconds / 1000.0) # convert <em>milliseconds</em> to <strong><em>seconds</em></strong><br><strong>#=&gt; 1999-12-31 23:00:00 -0600</strong></pre>\n<p>With either approach, you‚Äôll still have to manipulate the formatting of your DateTime objects on the front end so it‚Äôs hard to call one more advantageous than the other. At the end of the day, <em>there is </em><strong><em>not</em></strong><em> one single DateTime formatting practice to rule them¬†all.</em></p>\n<p>The truth is that you have to pay attention to your DateTime data while you‚Äôre passing it around your application. If you‚Äôre not careful, you might end up DateTime Traveling through the DateTime-Space Continuum.</p>\n<p>cakehole out.</p>\n<a href=\"https://medium.com/media/c4cedb391584938c0e81623784c18073/href\">https://medium.com/media/c4cedb391584938c0e81623784c18073/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3e7a99c3ff8b\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>As humans, we need to keep track of the passage of time. Early humans relied on nature. Changing seasons, rising suns, and annual animal migrations were signals that these hunter/gathers had to get to work, or start storing food for the cold¬†seasons.</p>\n<p>As society grew, we needed a better way to keep track of it all. A central system that everyone could refer to and rely on together. Ultimately, we created the concepts of <strong>Time</strong>, and¬†<strong>Date</strong>.</p>\n<p>Technically speaking, <strong><em>Time</em></strong><em> is the indefinite continued progress of existence and events that occur in an apparently irreversible succession from the past, through the present, to the¬†future.</em></p>\n<a href=\"https://medium.com/media/dba28571b619a88f1ed1ce2cbcc78a00/href\">https://medium.com/media/dba28571b619a88f1ed1ce2cbcc78a00/href</a><p>For this exercise, let‚Äôs look past this existential defintion of time and focus on the <strong>physical measurement</strong> of time; or <a href=\"https://en.wikipedia.org/wiki/Time#Units_of_time\">Units of¬†Time</a>.</p>\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/International_System_of_Units\">International System of Units (SI)</a>, the most universally accepted standard for measuring time,<strong> time is measured in seconds, </strong>the<strong> </strong>duration of which has something to do with vibrations of the cesium-133 atom. Just add¬†math!</p>\n<p>Ok, now that we know what time is and how humans track it. Let‚Äôs talk about how computers keep track of¬†time.</p>\n<p>Computers use something called <em>DateTime</em> to keep track of both Time and Date. Your standard SI DateTime string looks like¬†this:</p>\n<pre>YYYY-MM-DD HH:MM:SS UTC</pre>\n<p>Ok, that‚Äôs easy right? I just have to remember that the Year comes first, followed by the month, then the day, then the¬†time!</p>\n<p>Not so fast. More often than not, this DateTime format is now how we want to present the information to our users. Maybe we want the word <em>November </em>instead of the number <em>11?</em> What if we wanted to include the day of the week? That‚Äôs not even included in our DateTime string? While all computers <strong>do</strong> use DateTime, not all programming languages process DateTime the same way. This creates some problems for programmers.</p>\n<h3>Ruby &amp;¬†Rails</h3>\n<p>Rails is a common backend framework. Ruby has one main Date class, which contains a subclass of DateTime. These two work more or less the same way. The main difference is that DateTime also handles Time (Date also contains a subclass of Time, but more on that¬†later).</p>\n<pre>Date.new(2001,2,3)<br><strong>#=&gt; #&lt;Date: 2001‚Äì02‚Äì03&gt;<br></strong>DateTime.new(2001,2,3,4,5,6)<br><strong>#=&gt; #&lt;DateTime: 2001‚Äì02‚Äì03T04:05:06+00:00&gt;</strong></pre>\n<p>Both Date and DateTime can also be created using one of the <a href=\"https://ruby-doc.org/stdlib-2.6.1/libdoc/date/rdoc/Date.html\">following methods</a>:</p>\n<pre>:new() <strong>#=&gt; accepts comma separated arguments</strong><br>:jd() <strong>#=&gt; accepts chronological </strong><a href=\"https://en.wikipedia.org/wiki/Julian_day\"><strong>Julian day</strong></a><strong> number</strong><br>:ordinal() <strong>#=&gt; accepts given </strong><a href=\"https://en.wikipedia.org/wiki/Ordinal_date\"><strong>ordinal date</strong></a><strong>.</strong><br>:parse() <strong>#=&gt; accepts a representation of DateTime and parses the input</strong><br>:strptime() <strong>#=&gt; accepts representation of Time, and output template</strong><br>:today() <strong>#=&gt; returns the present day / current time</strong></pre>\n<p>No matter how they are created, Ruby returns dates as a string using the standard SI DateTime format: YYYY-MM-DD HH:MM:SS¬†UTC</p>\n<h3>Javascript</h3>\n<p>Javascript, one of the core technologies of the World Wide Web, also processes dates using Date¬†objects.</p>\n<pre>new Date(‚Äú2020‚Äì01‚Äì01‚Äù)<br><strong>//=&gt; Wed Jan 01 2020 20:00:00 GMT-0400</strong></pre>\n<p>Javascript Dates can also be created with multiple¬†methods:</p>\n<pre>new Date()<br><strong>//=&gt; returns current date/time</strong><br>new Date(<em>milliseconds</em>)<br><strong>//=&gt; milliseconds since 1970‚Äì01‚Äì01 00:00:00 UTC</strong><br>new Date(<em>dateString</em>)<br><strong>//=&gt; parses a date string</strong><br>new Date(<em>year</em>, <em>month</em>, <em>day</em>, <em>hours</em>, <em>minutes</em>, <em>seconds</em>, <em>milliseconds</em>)<br><strong>//=&gt; comma separated arguments</strong></pre>\n<p>No matter how they are created, Javascript returns Dates using the format: Wed Jan 01 2020 20:00:00¬†GMT-0400</p>\n<p>‚Äî</p>\n<p>If you‚Äôre paying attention, you may have noticed that our front end and our back end are now using different date formats. This is problematic. What if we had a datetime-local input field on a web form. When we submit that form to our database Javascript is going to generate a Date object and send its returned value to Rails where it will be converted into a Ruby Date object. If we haven‚Äôt setup our rails controller properly, Ruby won‚Äôt recognize the¬†date.</p>\n<pre>Date.new(‚ÄòWed Jan 01 2020 20:00:00 GMT-0400‚Äô)<br>DateTime.new(‚ÄòWed Jan 01 2020 20:00:00 GMT-0400‚Äô)</pre>\n<p>Both of these examples will fail because the input string does not match the expected arguments of:new().</p>\n<p>Likewise, if Rails passed a DateTime object to JavaScript in order to prefill that same input field JavaScript could have issues too if you‚Äôre not¬†careful.</p>\n<h3>So, what‚Äôs the best practice?</h3>\n<p>If you‚Äôre careful about how you initialize your DateTime objects you can make them flexible enough to work across multiple languages. For example, both Ruby and JavaScript allow for creation using string parsing Date.parse(dateString) and new Date(<em>dateString</em>) respectively.</p>\n<figure><img alt=\"A picture of antique watches.\" src=\"https://cdn-images-1.medium.com/max/1024/1*IeZN8OBkzmIGfLlfwu0JHA.jpeg\"><figcaption>‚ÄúTime is an illusion.‚Äù <strong>-Albert¬†Einstein</strong></figcaption></figure><p>Another approach is to convert all your DateTimes to <strong>milliseconds</strong>. JavaScript has out of the box support for milliseconds using new Date(<em>milliseconds</em>), but Ruby‚Äôs Date class does not. However, Ruby actually has another class called Time, which <a href=\"https://ruby-doc.org/core-2.2.2/Time.html\">ruby-docs</a> defines as an <em>abstraction of Date. </em>Unlike Date, Time has a way to handle <em>seconds</em>: Time.at(seconds) and thanks to math we know how to convert <em>seconds</em> into milliseconds.</p>\n<pre># JAVASCRIPT<br>const milliseconds = 946702800<br>new Date(milliseconds)<br><strong>#=&gt; 1999-12-31 23:00:00 -0600</strong></pre>\n<pre># RUBY<br>milliseconds = 946702800<br>Time.at(milliseconds / 1000.0) # convert <em>milliseconds</em> to <strong><em>seconds</em></strong><br><strong>#=&gt; 1999-12-31 23:00:00 -0600</strong></pre>\n<p>With either approach, you‚Äôll still have to manipulate the formatting of your DateTime objects on the front end so it‚Äôs hard to call one more advantageous than the other. At the end of the day, <em>there is </em><strong><em>not</em></strong><em> one single DateTime formatting practice to rule them¬†all.</em></p>\n<p>The truth is that you have to pay attention to your DateTime data while you‚Äôre passing it around your application. If you‚Äôre not careful, you might end up DateTime Traveling through the DateTime-Space Continuum.</p>\n<p>cakehole out.</p>\n<a href=\"https://medium.com/media/c4cedb391584938c0e81623784c18073/href\">https://medium.com/media/c4cedb391584938c0e81623784c18073/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3e7a99c3ff8b\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "datetime",
        "rails",
        "javascript",
        "ruby-on-rails",
        "calendar"
      ]
    },
    {
      "title": "RAILS_ENV=blog",
      "pubDate": "2019-12-05 01:59:19",
      "link": "https://medium.com/@cakehole/rails-env-blog-5f677fd1b062?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/5f677fd1b062",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/520/1*IwyLPhYHoovaEKaxK2L8sQ.png",
      "description": "\n<p>When I first started building Rails apps, I kept finding myself troubleshooting for <em>way too long </em>before finally receiving an error message along the lines of try using rails db:migrate RAILS_ENV=development. This infuriated me, because more often than not, I had already run rails db:migrate a dozen or so times over the past hour‚Äîdropping my entire database each time. I had just created a brand new Rails app, isn‚Äôt <strong><em>that</em></strong> my Rails environment? I also had not intentionally specified ‚Äú<em>development</em>‚Äù vs. something else. What‚Äôs the deal,¬†Rails?</p>\n<p>Maybe it‚Äôs short for envelope? No, that doesn‚Äôt make¬†sense‚Ä¶</p>\n<p>I was starting to think that <strong><em>I</em></strong> was doing something wrong. After losing my mind a few more times than I‚Äôd like to admit, I had to find out what the deal with this RAILS_ENV was.</p>\n<a href=\"https://medium.com/media/a05d8b4ca8101458c3c473354a18c3f2/href\">https://medium.com/media/a05d8b4ca8101458c3c473354a18c3f2/href</a><p>After some expert Googling, I learned that the RAILS_ENV is what‚Äôs called an <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">environment variable</a>. What‚Äôs an environment variable? Great question.</p>\n<p>The world wide wikipedia (that‚Äôs what www stands for, right?) defines an environment variable as <em>a dynamically-named value that can affect the way running processes will behave on a computer.</em></p>\n<p>Ok, that kind of makes sense. When you‚Äôre building an app you might want it to behave a little differently than when you launch it. Maybe there‚Äôs a gem that‚Äôs extremely helpful when first building an app that you don‚Äôt want on your production server because it‚Äôs no longer benefits the core functionality of the app<em>.</em> Perhaps it‚Äôs something that just generates random data which you won‚Äôt need in the real world <em>(*cough* </em><a href=\"https://github.com/faker-ruby/faker\"><em>faker</em></a><em> *cough*)</em>. Gesundheit.</p>\n<p>But how are these ‚Äúenvironments‚Äù defined? What else can I do with them? Well, if you‚Äôre poking around at all the files in your Rails app, there‚Äôs a few places you might notice some references to ‚Äúenvironment‚Äù‚Ää‚Äî‚Ääthe first is probably the config/environments folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/520/1*IwyLPhYHoovaEKaxK2L8sQ.png\"><figcaption>Now <strong><em>this</em></strong> is Environmental Science!</figcaption></figure><p>Rails ships with <a href=\"https://signalvnoise.com/posts/3535-beyond-the-default-rails-environments\">default configurations</a> for the three most common environments: test, development, and production. If you open one of these¬†.rb files, you‚Äôll see something like¬†this:</p>\n<pre>Rails.application.configure do<br>  config.cache_classes = true<br>  config.eager_load = true<br>  config.consider_all_requests_local = false<br>  config.action_controller.perform_caching = true<br>  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?<br>  config.assets.compile = false<br>  config.active_storage.service = :local<br>  config.log_level = :debug<br>  config.log_tags = [ :request_id ]<br>  config.action_mailer.perform_caching = false<br>  config.i18n.fallbacks = true<br>  config.active_support.deprecation = :notify<br>  config.log_formatter = ::Logger::Formatter.new</pre>\n<pre>if ENV[\"RAILS_LOG_TO_STDOUT\"].present?<br>    logger = ActiveSupport::Logger.new(STDOUT)<br>    logger.formatter = config.log_formatter<br>    config.logger = ActiveSupport::TaggedLogging.new(logger)<br>  end</pre>\n<pre>config.active_record.dump_schema_after_migration = false</pre>\n<pre>end</pre>\n<p>You don‚Äôt have to understand exactly what it is all of these config#methods are doing, but if you compare the files side by side, you‚Äôll get a sense of which settings are disabled or enabled (true/false) for which environment. Most of them appear to have to do with logs, caches, debugging, and server access. That makes sense. In a production environment we probably <strong>do</strong> want to log certain user behaviors that we don‚Äôt necessarily need when we‚Äôre debugging our skateboard app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3HHzvx_Z1lqGu2mN.png\"><figcaption>Tony Hawk might disagree¬†here.</figcaption></figure><p>Personally, I found that my Gemfile helped me understand the environment differences way better than the config/environment files¬†did.</p>\n<p>The default Rails Gemfile looks something like¬†this:</p>\n<pre>gem ‚Äòrails‚Äô, ‚Äò~&gt; 6.0.1‚Äô<br>gem ‚Äòsqlite3‚Äô, ‚Äò~&gt; 1.4‚Äô<br>gem ‚Äòpuma‚Äô, ‚Äò~&gt; 4.1‚Äô<br>gem ‚Äòsass-rails‚Äô, ‚Äò&gt;= 6‚Äô<br>gem ‚Äòwebpacker‚Äô, ‚Äò~&gt; 4.0‚Äô<br>gem ‚Äòturbolinks‚Äô, ‚Äò~&gt; 5‚Äô<br>gem ‚Äòjbuilder‚Äô, ‚Äò~&gt; 2.7‚Äô<br>gem ‚Äòbcrypt‚Äô, ‚Äò~&gt; 3.1.7‚Äô<br>gem ‚Äòbootsnap‚Äô, ‚Äò&gt;= 1.4.2‚Äô, require: false</pre>\n<pre>group :development, :test do<br> gem ‚Äòbyebug‚Äô, platforms: [:mri, :mingw, :x64_mingw]<br>end</pre>\n<pre>group :development do<br> gem ‚Äòweb-console‚Äô, ‚Äò&gt;= 3.3.0‚Äô<br> gem ‚Äòlisten‚Äô, ‚Äò&gt;= 3.0.5‚Äô, ‚Äò&lt; 3.2‚Äô<br> gem ‚Äòspring‚Äô<br> gem ‚Äòspring-watcher-listen‚Äô, ‚Äò~&gt; 2.0.0‚Äô<br>end</pre>\n<pre>group :test do<br> gem ‚Äòcapybara‚Äô, ‚Äò&gt;= 2.15‚Äô<br> gem ‚Äòselenium-webdriver‚Äô<br> gem ‚Äòwebdrivers‚Äô<br>end</pre>\n<p>Ok, ok. I know. It doesn‚Äôt say the word ‚Äúenvironment‚Äù in the Gemfile. Trust me when I say that it‚Äôs not coincidental that¬†:development and¬†:test are both also environment names. Take a minute to look at the gems listed under those words: byebug, web-console, cabybara ‚Äîwait‚Ä¶ these are all tools used for testing and debugging! You wouldn‚Äôt want these in a live¬†app.</p>\n<p>And what about the gems listed at the top? Well, they all seem pretty important (especially that rails one). <strong>Different gems are used in different environments!</strong></p>\n<p>You might also notice that your Rails app has multiple databases that just so happen to have the same names as the environments. Am I to believe that we, as developers, prefer to have separate databases setup for development and testing so that we don‚Äôt accidentally destroy customer data?¬†ü§î</p>\n<a href=\"https://medium.com/media/44ae4278bfbfd00deb6e329a828a9be5/href\">https://medium.com/media/44ae4278bfbfd00deb6e329a828a9be5/href</a><p>This whole Rails thing is actually starting to make sense! Having control over your environment allows you get the results you want when you want them, and to have the tools you need when you need¬†them.</p>\n<p>That brings me back to my initial question though, I never explicitly told rails that I wanted a <em>‚Äúdevelopment‚Äù</em> environment. What¬†gives?</p>\n<p>Turns out, <strong>development</strong> is the default environment. So unless you specify otherwise, you‚Äôll be a default developer.</p>\n<p>Maybe that‚Äôs because we‚Äôre human and we make mistakes. Maybe it‚Äôs Maybelline. We may never¬†know.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f677fd1b062\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>When I first started building Rails apps, I kept finding myself troubleshooting for <em>way too long </em>before finally receiving an error message along the lines of try using rails db:migrate RAILS_ENV=development. This infuriated me, because more often than not, I had already run rails db:migrate a dozen or so times over the past hour‚Äîdropping my entire database each time. I had just created a brand new Rails app, isn‚Äôt <strong><em>that</em></strong> my Rails environment? I also had not intentionally specified ‚Äú<em>development</em>‚Äù vs. something else. What‚Äôs the deal,¬†Rails?</p>\n<p>Maybe it‚Äôs short for envelope? No, that doesn‚Äôt make¬†sense‚Ä¶</p>\n<p>I was starting to think that <strong><em>I</em></strong> was doing something wrong. After losing my mind a few more times than I‚Äôd like to admit, I had to find out what the deal with this RAILS_ENV was.</p>\n<a href=\"https://medium.com/media/a05d8b4ca8101458c3c473354a18c3f2/href\">https://medium.com/media/a05d8b4ca8101458c3c473354a18c3f2/href</a><p>After some expert Googling, I learned that the RAILS_ENV is what‚Äôs called an <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">environment variable</a>. What‚Äôs an environment variable? Great question.</p>\n<p>The world wide wikipedia (that‚Äôs what www stands for, right?) defines an environment variable as <em>a dynamically-named value that can affect the way running processes will behave on a computer.</em></p>\n<p>Ok, that kind of makes sense. When you‚Äôre building an app you might want it to behave a little differently than when you launch it. Maybe there‚Äôs a gem that‚Äôs extremely helpful when first building an app that you don‚Äôt want on your production server because it‚Äôs no longer benefits the core functionality of the app<em>.</em> Perhaps it‚Äôs something that just generates random data which you won‚Äôt need in the real world <em>(*cough* </em><a href=\"https://github.com/faker-ruby/faker\"><em>faker</em></a><em> *cough*)</em>. Gesundheit.</p>\n<p>But how are these ‚Äúenvironments‚Äù defined? What else can I do with them? Well, if you‚Äôre poking around at all the files in your Rails app, there‚Äôs a few places you might notice some references to ‚Äúenvironment‚Äù‚Ää‚Äî‚Ääthe first is probably the config/environments folder.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/520/1*IwyLPhYHoovaEKaxK2L8sQ.png\"><figcaption>Now <strong><em>this</em></strong> is Environmental Science!</figcaption></figure><p>Rails ships with <a href=\"https://signalvnoise.com/posts/3535-beyond-the-default-rails-environments\">default configurations</a> for the three most common environments: test, development, and production. If you open one of these¬†.rb files, you‚Äôll see something like¬†this:</p>\n<pre>Rails.application.configure do<br>  config.cache_classes = true<br>  config.eager_load = true<br>  config.consider_all_requests_local = false<br>  config.action_controller.perform_caching = true<br>  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?<br>  config.assets.compile = false<br>  config.active_storage.service = :local<br>  config.log_level = :debug<br>  config.log_tags = [ :request_id ]<br>  config.action_mailer.perform_caching = false<br>  config.i18n.fallbacks = true<br>  config.active_support.deprecation = :notify<br>  config.log_formatter = ::Logger::Formatter.new</pre>\n<pre>if ENV[\"RAILS_LOG_TO_STDOUT\"].present?<br>    logger = ActiveSupport::Logger.new(STDOUT)<br>    logger.formatter = config.log_formatter<br>    config.logger = ActiveSupport::TaggedLogging.new(logger)<br>  end</pre>\n<pre>config.active_record.dump_schema_after_migration = false</pre>\n<pre>end</pre>\n<p>You don‚Äôt have to understand exactly what it is all of these config#methods are doing, but if you compare the files side by side, you‚Äôll get a sense of which settings are disabled or enabled (true/false) for which environment. Most of them appear to have to do with logs, caches, debugging, and server access. That makes sense. In a production environment we probably <strong>do</strong> want to log certain user behaviors that we don‚Äôt necessarily need when we‚Äôre debugging our skateboard app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3HHzvx_Z1lqGu2mN.png\"><figcaption>Tony Hawk might disagree¬†here.</figcaption></figure><p>Personally, I found that my Gemfile helped me understand the environment differences way better than the config/environment files¬†did.</p>\n<p>The default Rails Gemfile looks something like¬†this:</p>\n<pre>gem ‚Äòrails‚Äô, ‚Äò~&gt; 6.0.1‚Äô<br>gem ‚Äòsqlite3‚Äô, ‚Äò~&gt; 1.4‚Äô<br>gem ‚Äòpuma‚Äô, ‚Äò~&gt; 4.1‚Äô<br>gem ‚Äòsass-rails‚Äô, ‚Äò&gt;= 6‚Äô<br>gem ‚Äòwebpacker‚Äô, ‚Äò~&gt; 4.0‚Äô<br>gem ‚Äòturbolinks‚Äô, ‚Äò~&gt; 5‚Äô<br>gem ‚Äòjbuilder‚Äô, ‚Äò~&gt; 2.7‚Äô<br>gem ‚Äòbcrypt‚Äô, ‚Äò~&gt; 3.1.7‚Äô<br>gem ‚Äòbootsnap‚Äô, ‚Äò&gt;= 1.4.2‚Äô, require: false</pre>\n<pre>group :development, :test do<br> gem ‚Äòbyebug‚Äô, platforms: [:mri, :mingw, :x64_mingw]<br>end</pre>\n<pre>group :development do<br> gem ‚Äòweb-console‚Äô, ‚Äò&gt;= 3.3.0‚Äô<br> gem ‚Äòlisten‚Äô, ‚Äò&gt;= 3.0.5‚Äô, ‚Äò&lt; 3.2‚Äô<br> gem ‚Äòspring‚Äô<br> gem ‚Äòspring-watcher-listen‚Äô, ‚Äò~&gt; 2.0.0‚Äô<br>end</pre>\n<pre>group :test do<br> gem ‚Äòcapybara‚Äô, ‚Äò&gt;= 2.15‚Äô<br> gem ‚Äòselenium-webdriver‚Äô<br> gem ‚Äòwebdrivers‚Äô<br>end</pre>\n<p>Ok, ok. I know. It doesn‚Äôt say the word ‚Äúenvironment‚Äù in the Gemfile. Trust me when I say that it‚Äôs not coincidental that¬†:development and¬†:test are both also environment names. Take a minute to look at the gems listed under those words: byebug, web-console, cabybara ‚Äîwait‚Ä¶ these are all tools used for testing and debugging! You wouldn‚Äôt want these in a live¬†app.</p>\n<p>And what about the gems listed at the top? Well, they all seem pretty important (especially that rails one). <strong>Different gems are used in different environments!</strong></p>\n<p>You might also notice that your Rails app has multiple databases that just so happen to have the same names as the environments. Am I to believe that we, as developers, prefer to have separate databases setup for development and testing so that we don‚Äôt accidentally destroy customer data?¬†ü§î</p>\n<a href=\"https://medium.com/media/44ae4278bfbfd00deb6e329a828a9be5/href\">https://medium.com/media/44ae4278bfbfd00deb6e329a828a9be5/href</a><p>This whole Rails thing is actually starting to make sense! Having control over your environment allows you get the results you want when you want them, and to have the tools you need when you need¬†them.</p>\n<p>That brings me back to my initial question though, I never explicitly told rails that I wanted a <em>‚Äúdevelopment‚Äù</em> environment. What¬†gives?</p>\n<p>Turns out, <strong>development</strong> is the default environment. So unless you specify otherwise, you‚Äôll be a default developer.</p>\n<p>Maybe that‚Äôs because we‚Äôre human and we make mistakes. Maybe it‚Äôs Maybelline. We may never¬†know.</p>\n<p>cakehole out.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f677fd1b062\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "rails",
        "software-engineering",
        "ruby-on-rails"
      ]
    },
    {
      "title": "A Rubyist‚Äôs Guide to SQL Joins",
      "pubDate": "2019-11-14 02:21:41",
      "link": "https://medium.com/@cakehole/a-rubyists-guide-to-sql-joins-be9475f2b569?source=rss-4800652ebeb2------2",
      "guid": "https://medium.com/p/be9475f2b569",
      "author": "Kyle Cole",
      "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*rA5b_M2rYZzDmj5JUzhYvg.jpeg",
      "description": "\n<p>If you‚Äôve ever had a job that required you to run reports, you‚Äôve probably had some light exposure to SQL <em>(Structured Query Language)</em>. If so, you‚Äôve probably noticed that even if you don‚Äôt have any coding experience, the syntax is pretty readable.</p>\n<pre>SELECT column FROM table WHERE (column = ‚Äòvalue‚Äô)</pre>\n<p>Even if you don‚Äôt know what the data is, you can draw the conclusion that we‚Äôre SELECTing <em>something</em> FROM <em>something else</em> WHEN a condition is met. You can probably even guess what that condition is!</p>\n<p>Pretty simple, right? Well, it is. Until JOIN enters the¬†picture‚Ä¶</p>\n<p>For years, I struggled with how to properly JOIN two tables. In fact, I hated joins so much that my go to move was to download the data to¬†<em>.csv</em> and perform a bunch of VLOOKUP functions in¬†Excel‚Ñ¢</p>\n<a href=\"https://medium.com/media/ecaea266ce4553f206dc4b9beeca36ed/href\">https://medium.com/media/ecaea266ce4553f206dc4b9beeca36ed/href</a><p>I know. <strong>I apologize.</strong></p>\n<p>The reason I was scared of JOINs is because whenever I looked up examples and documentation I always found something that looked like¬†this:</p>\n<pre>SELECT * FROM employees e<br> JOIN jobs j ON e.job_id = j.job_id<br> LEFT JOIN employees m ON e.manager_id = m.employee_id<br> INNER JOIN departments d ON d.department_id = e.department_id<br> OUTER JOIN employees dm ON d.manager_id = dm.employee_id<br> LEFT JOIN locations l ON d.location_id = l.location_id<br> LEFT JOIN countries c ON l.country_id = c.country_id<br> RIGHT JOIN regions r ON c.region_id = r.region_id<br> LEFT OUTER JOIN jobs jj ON jj.job_id = jh.job_id<br>ORDER BY e.employee_id;</pre>\n<p>I‚Äôd then inevitably come across some super useful documentation paired with the lunar calendar of venn diagrams <em>(if you‚Äôre thinking that‚Äôs not how venn diagrams work, you‚Äôre¬†right)</em>.</p>\n<blockquote>\n<strong>(INNER) JOIN:</strong> Returns records that have matching values in both tables<br><strong>LEFT (OUTER) JOIN:</strong> Returns all records from the left table, with matches from the right<br><strong>RIGHT (OUTER) JOIN:</strong> Returns all records from the right table, with matches from the left<br><strong>FULL (OUTER) JOIN:</strong> Returns all records when there is a match<br><br><strong>TIPS:</strong> <strong>FULL OUTER JOIN</strong>, <strong>FULL JOIN</strong> and <strong>LEFT JOIN</strong> are all the same.<br><strong>RIGHT JOIN</strong> is the opposite of <strong>LEFT¬†JOIN</strong>.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rA5b_M2rYZzDmj5JUzhYvg.jpeg\"><figcaption>SQLunar Calendar??</figcaption></figure><a href=\"https://medium.com/media/06346dbd97ad9cc6b475f0e96052f848/href\">https://medium.com/media/06346dbd97ad9cc6b475f0e96052f848/href</a><p><strong>Hold Up.</strong> If FULL OUTER returns matches in both the LEFT and RIGHT, then why use LEFT and RIGHT at all? And if LEFT is the same as FULL, then why have two different options to do the same thing? What does FULL mean anyways? I‚Äôm so confused‚Ä¶</p>\n<p>Each time I saw this graphic I thought to myself <em>‚Äúthere </em><strong><em>has</em></strong><em> to be better explanation of this on the internet.‚Äù</em> But after years of searching, I‚Äôve turned up nothing but variations of this lunar calendar graphic. So, I took the matter into my own hands and decided to write out each JOIN using a language I have a good grasp on;¬†<strong>Ruby.</strong></p>\n<p>So, without further ado, here are <strong>SQL Joins as Ruby¬†Methods</strong>.</p>\n<p><strong><em>NOTE:</em></strong><em> While the Ruby syntax below looks correct, </em><strong><em>this is pseudocode</em></strong><em> meant to represent SQL actions. I do not recommend that you copy and paste anything into your application (isn‚Äôt that plagiarism?).</em></p>\n<h3>INNER JOIN</h3>\n<p>I decided to start with the one that <em>did</em> make sense to me, the only one that actually <em>does</em> work like a venn diagram (but who asked me). An INNER JOIN will <em>iterate</em> through each row in the first table, and select that row when there is a match in the second table. When selecting that row, the data from the second table is also included in the new¬†dataset.</p>\n<p>Here it is in¬†<strong>Ruby.</strong></p>\n<pre>def INNER_JOIN(table_1, table_2)<br>   new_table = {} ## create a new empty table<br>   # for each row in table_1<br>   table_1.select do |table_1_row| <br>     # scan table_2 and find the data that matches <br>      table_2_match = table_2.find do |table_2_row| <br>          table_2_row.column == table_1_row.column<br>      end<br>      # if a match is found (if result is true)<br>      # add specified column(s) to new_table as a key/value pair<br>      if table_2_match<br>         new_table[:table_1_data] = table_1_row.column<br>         new_table[:table_2_data] = table_2_row_match.column<br>      end<br>      return new_table<br>      # if no data matched, new_table will be empty<br>   end<br>end</pre>\n<p>Let‚Äôs refer to this as a¬†.select/.select relationship.</p>\n<p><strong><em>I know</em></strong><em>, </em>we used¬†.find on table_2.<em> </em>But, we are still in theory <strong>selecting</strong> data subsets from both tables‚Äîagain, it‚Äôs pseudocode.</p>\n<h3>LEFT JOIN</h3>\n<p>What a LEFT JOIN does is <em>iterate</em> through each row in the first table, and checks the second table for a corresponding value. If the second table contains a match, the data from the second table is appended to that row in the first table. <strong>All rows from the first table are returned.</strong></p>\n<p>We‚Äôll refer this as a¬†.map/.find relationship. We are <em>mapping</em> the first set of data to a new dataset. While doing so, we are iterating over the second data set to find a match to be included in our new data¬†set.</p>\n<pre>def LEFT_JOIN(table_1, table_2)<br>   new_table = {}<br>   # for each row in table_1<br>   table_1.map do |table_1_row|<br>     # scan table_2 and find the data that matches<br>     table_2_match = table_2.find do |table_2_row| <br>         table_2_row.column == table_1_row.column<br>     end<br>     # add the row of table_1 regardless of the match<br>     new_table[:table_1_data] = table_1_row<br>     # if a match is found (if result is true)<br>     # add specified column(s) to new_table as a key/value pair<br>     if table_2_match<br>           new_table[:table_2_data] = table_2_match.column<br>     end<br>     return new_table<br>     # if no data matched, all rows from table_1 will be included<br>  end<br>end</pre>\n<p>Why is this called a <em>LEFT</em> join? Well, in English we read from left to right. Look at the arguments for this method, which table appears on the¬†left?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Qalb_(programming_language)\">Do they code from right to left in Arabic?</a>¬†ü§î</p>\n<h3>RIGHT JOIN</h3>\n<p>We already know from that handy documentation above that a RIGHT JOIN is the opposite of a LEFT JOIN. Knowing that, we can assume that a RIGHT JOIN works the same way, except it <em>iterates</em> through table_2 <strong>first</strong> (using¬†.map) and then <em>iterates</em> through table_1 using¬†.find.</p>\n<pre>def RIGHT_JOIN(table_1, table_2)<br>   new_table = {}<br>   # for each row in table_2<br>   table_2.map do |table_2_row|<br>       # scan table_1 and find the data that matches<br>       table_1_match = table_1.find do |table_1_row| <br>           table_1_row.column == table_2_row.column<br>       end<br>       # add the row of table_2 regardless of the match<br>       new_table[:table_2_data] = table_2_row<br>       # if a match is found (if result is true)<br>       # add specified column(s) to new_table as a key/value pair<br>       if table_1_match<br>          new_table[:table_1_data] = table_1_match.column<br>       end<br>      return new_table<br>      # if no data matched, all rows from table_2 will be included<br>   end<br>end</pre>\n<p>Why is this called a <em>RIGHT</em> join? Again, we read from left to right. Look at the arguments for this method, which table appears on the <em>right</em>? You‚Äôll also notice that we switched the order in which we iterate through the tables, but not the order in which we call the arguments themselves.</p>\n<h3>OUTER JOIN</h3>\n<p>I actually had a really hard time writing this one in Ruby. I think that‚Äôs because I couldn‚Äôt think of a practical example in which I‚Äôd need an OUTER JOIN so it was difficult for me to walk through the process logically. So, I‚Äôm going to just skip it for now. I‚Äôll figure it out when the time¬†comes.</p>\n<pre>def OUTER_JOIN(table_1, table_2)<br>    puts \"Coming Soon\"<br>end</pre>\n<h3>CONCLUSION</h3>\n<p>This was fun. But even after doing this exercise, SQL joins continue to be a pain in the @$$ <em>(oh stop, it‚Äôs an instance variable)</em>. But, hopefully they make a little more sense to you now. If not, there‚Äôs always <a href=\"https://rubygems.org/gems/activerecord/\"><strong>Active¬†Record</strong></a>.</p>\n<p>Actually, even if you <em>do</em> understand SQL joins, just use <strong>Active Record</strong>. It‚Äôll change your life as a Rubyist. But more on that later.¬†üôÉ</p>\n<p>cakehole out.</p>\n<a href=\"https://medium.com/media/350c7f7e4946eaf1f83c6f623b74b2f9/href\">https://medium.com/media/350c7f7e4946eaf1f83c6f623b74b2f9/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=be9475f2b569\" width=\"1\" height=\"1\" alt=\"\">\n",
      "content": "\n<p>If you‚Äôve ever had a job that required you to run reports, you‚Äôve probably had some light exposure to SQL <em>(Structured Query Language)</em>. If so, you‚Äôve probably noticed that even if you don‚Äôt have any coding experience, the syntax is pretty readable.</p>\n<pre>SELECT column FROM table WHERE (column = ‚Äòvalue‚Äô)</pre>\n<p>Even if you don‚Äôt know what the data is, you can draw the conclusion that we‚Äôre SELECTing <em>something</em> FROM <em>something else</em> WHEN a condition is met. You can probably even guess what that condition is!</p>\n<p>Pretty simple, right? Well, it is. Until JOIN enters the¬†picture‚Ä¶</p>\n<p>For years, I struggled with how to properly JOIN two tables. In fact, I hated joins so much that my go to move was to download the data to¬†<em>.csv</em> and perform a bunch of VLOOKUP functions in¬†Excel‚Ñ¢</p>\n<a href=\"https://medium.com/media/ecaea266ce4553f206dc4b9beeca36ed/href\">https://medium.com/media/ecaea266ce4553f206dc4b9beeca36ed/href</a><p>I know. <strong>I apologize.</strong></p>\n<p>The reason I was scared of JOINs is because whenever I looked up examples and documentation I always found something that looked like¬†this:</p>\n<pre>SELECT * FROM employees e<br> JOIN jobs j ON e.job_id = j.job_id<br> LEFT JOIN employees m ON e.manager_id = m.employee_id<br> INNER JOIN departments d ON d.department_id = e.department_id<br> OUTER JOIN employees dm ON d.manager_id = dm.employee_id<br> LEFT JOIN locations l ON d.location_id = l.location_id<br> LEFT JOIN countries c ON l.country_id = c.country_id<br> RIGHT JOIN regions r ON c.region_id = r.region_id<br> LEFT OUTER JOIN jobs jj ON jj.job_id = jh.job_id<br>ORDER BY e.employee_id;</pre>\n<p>I‚Äôd then inevitably come across some super useful documentation paired with the lunar calendar of venn diagrams <em>(if you‚Äôre thinking that‚Äôs not how venn diagrams work, you‚Äôre¬†right)</em>.</p>\n<blockquote>\n<strong>(INNER) JOIN:</strong> Returns records that have matching values in both tables<br><strong>LEFT (OUTER) JOIN:</strong> Returns all records from the left table, with matches from the right<br><strong>RIGHT (OUTER) JOIN:</strong> Returns all records from the right table, with matches from the left<br><strong>FULL (OUTER) JOIN:</strong> Returns all records when there is a match<br><br><strong>TIPS:</strong> <strong>FULL OUTER JOIN</strong>, <strong>FULL JOIN</strong> and <strong>LEFT JOIN</strong> are all the same.<br><strong>RIGHT JOIN</strong> is the opposite of <strong>LEFT¬†JOIN</strong>.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rA5b_M2rYZzDmj5JUzhYvg.jpeg\"><figcaption>SQLunar Calendar??</figcaption></figure><a href=\"https://medium.com/media/06346dbd97ad9cc6b475f0e96052f848/href\">https://medium.com/media/06346dbd97ad9cc6b475f0e96052f848/href</a><p><strong>Hold Up.</strong> If FULL OUTER returns matches in both the LEFT and RIGHT, then why use LEFT and RIGHT at all? And if LEFT is the same as FULL, then why have two different options to do the same thing? What does FULL mean anyways? I‚Äôm so confused‚Ä¶</p>\n<p>Each time I saw this graphic I thought to myself <em>‚Äúthere </em><strong><em>has</em></strong><em> to be better explanation of this on the internet.‚Äù</em> But after years of searching, I‚Äôve turned up nothing but variations of this lunar calendar graphic. So, I took the matter into my own hands and decided to write out each JOIN using a language I have a good grasp on;¬†<strong>Ruby.</strong></p>\n<p>So, without further ado, here are <strong>SQL Joins as Ruby¬†Methods</strong>.</p>\n<p><strong><em>NOTE:</em></strong><em> While the Ruby syntax below looks correct, </em><strong><em>this is pseudocode</em></strong><em> meant to represent SQL actions. I do not recommend that you copy and paste anything into your application (isn‚Äôt that plagiarism?).</em></p>\n<h3>INNER JOIN</h3>\n<p>I decided to start with the one that <em>did</em> make sense to me, the only one that actually <em>does</em> work like a venn diagram (but who asked me). An INNER JOIN will <em>iterate</em> through each row in the first table, and select that row when there is a match in the second table. When selecting that row, the data from the second table is also included in the new¬†dataset.</p>\n<p>Here it is in¬†<strong>Ruby.</strong></p>\n<pre>def INNER_JOIN(table_1, table_2)<br>   new_table = {} ## create a new empty table<br>   # for each row in table_1<br>   table_1.select do |table_1_row| <br>     # scan table_2 and find the data that matches <br>      table_2_match = table_2.find do |table_2_row| <br>          table_2_row.column == table_1_row.column<br>      end<br>      # if a match is found (if result is true)<br>      # add specified column(s) to new_table as a key/value pair<br>      if table_2_match<br>         new_table[:table_1_data] = table_1_row.column<br>         new_table[:table_2_data] = table_2_row_match.column<br>      end<br>      return new_table<br>      # if no data matched, new_table will be empty<br>   end<br>end</pre>\n<p>Let‚Äôs refer to this as a¬†.select/.select relationship.</p>\n<p><strong><em>I know</em></strong><em>, </em>we used¬†.find on table_2.<em> </em>But, we are still in theory <strong>selecting</strong> data subsets from both tables‚Äîagain, it‚Äôs pseudocode.</p>\n<h3>LEFT JOIN</h3>\n<p>What a LEFT JOIN does is <em>iterate</em> through each row in the first table, and checks the second table for a corresponding value. If the second table contains a match, the data from the second table is appended to that row in the first table. <strong>All rows from the first table are returned.</strong></p>\n<p>We‚Äôll refer this as a¬†.map/.find relationship. We are <em>mapping</em> the first set of data to a new dataset. While doing so, we are iterating over the second data set to find a match to be included in our new data¬†set.</p>\n<pre>def LEFT_JOIN(table_1, table_2)<br>   new_table = {}<br>   # for each row in table_1<br>   table_1.map do |table_1_row|<br>     # scan table_2 and find the data that matches<br>     table_2_match = table_2.find do |table_2_row| <br>         table_2_row.column == table_1_row.column<br>     end<br>     # add the row of table_1 regardless of the match<br>     new_table[:table_1_data] = table_1_row<br>     # if a match is found (if result is true)<br>     # add specified column(s) to new_table as a key/value pair<br>     if table_2_match<br>           new_table[:table_2_data] = table_2_match.column<br>     end<br>     return new_table<br>     # if no data matched, all rows from table_1 will be included<br>  end<br>end</pre>\n<p>Why is this called a <em>LEFT</em> join? Well, in English we read from left to right. Look at the arguments for this method, which table appears on the¬†left?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Qalb_(programming_language)\">Do they code from right to left in Arabic?</a>¬†ü§î</p>\n<h3>RIGHT JOIN</h3>\n<p>We already know from that handy documentation above that a RIGHT JOIN is the opposite of a LEFT JOIN. Knowing that, we can assume that a RIGHT JOIN works the same way, except it <em>iterates</em> through table_2 <strong>first</strong> (using¬†.map) and then <em>iterates</em> through table_1 using¬†.find.</p>\n<pre>def RIGHT_JOIN(table_1, table_2)<br>   new_table = {}<br>   # for each row in table_2<br>   table_2.map do |table_2_row|<br>       # scan table_1 and find the data that matches<br>       table_1_match = table_1.find do |table_1_row| <br>           table_1_row.column == table_2_row.column<br>       end<br>       # add the row of table_2 regardless of the match<br>       new_table[:table_2_data] = table_2_row<br>       # if a match is found (if result is true)<br>       # add specified column(s) to new_table as a key/value pair<br>       if table_1_match<br>          new_table[:table_1_data] = table_1_match.column<br>       end<br>      return new_table<br>      # if no data matched, all rows from table_2 will be included<br>   end<br>end</pre>\n<p>Why is this called a <em>RIGHT</em> join? Again, we read from left to right. Look at the arguments for this method, which table appears on the <em>right</em>? You‚Äôll also notice that we switched the order in which we iterate through the tables, but not the order in which we call the arguments themselves.</p>\n<h3>OUTER JOIN</h3>\n<p>I actually had a really hard time writing this one in Ruby. I think that‚Äôs because I couldn‚Äôt think of a practical example in which I‚Äôd need an OUTER JOIN so it was difficult for me to walk through the process logically. So, I‚Äôm going to just skip it for now. I‚Äôll figure it out when the time¬†comes.</p>\n<pre>def OUTER_JOIN(table_1, table_2)<br>    puts \"Coming Soon\"<br>end</pre>\n<h3>CONCLUSION</h3>\n<p>This was fun. But even after doing this exercise, SQL joins continue to be a pain in the @$$ <em>(oh stop, it‚Äôs an instance variable)</em>. But, hopefully they make a little more sense to you now. If not, there‚Äôs always <a href=\"https://rubygems.org/gems/activerecord/\"><strong>Active¬†Record</strong></a>.</p>\n<p>Actually, even if you <em>do</em> understand SQL joins, just use <strong>Active Record</strong>. It‚Äôll change your life as a Rubyist. But more on that later.¬†üôÉ</p>\n<p>cakehole out.</p>\n<a href=\"https://medium.com/media/350c7f7e4946eaf1f83c6f623b74b2f9/href\">https://medium.com/media/350c7f7e4946eaf1f83c6f623b74b2f9/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=be9475f2b569\" width=\"1\" height=\"1\" alt=\"\">\n",
      "enclosure": {
        
      },
      "categories": [
        "sql",
        "ruby",
        "programming"
      ]
    }
  ]
}

export default BLOG_BACKUP